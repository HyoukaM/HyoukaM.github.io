<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的日常</title>
      <link href="dailyrRecord/%E6%88%91%E7%9A%84%E6%97%A5%E5%B8%B8/"/>
      <url>dailyrRecord/%E6%88%91%E7%9A%84%E6%97%A5%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录一下日常生活🌈🌈🌈 </p></blockquote><h2 id="2021-06-29"><a href="#2021-06-29" class="headerlink" title="2021-06-29"></a>2021-06-29</h2><p>学习沉淀threeJs, 可以不太会更新这块内容。</p><h2 id="2021-05-07"><a href="#2021-05-07" class="headerlink" title="2021-05-07"></a>2021-05-07</h2><p>小程序头大，而且有赞同时只能有一个后台分支配合前端所以总是会导致<br>我在对接口的时候突然over就很烦</p><h2 id="2021-05-02至2021-05-06"><a href="#2021-05-02至2021-05-06" class="headerlink" title="2021-05-02至2021-05-06"></a>2021-05-02至2021-05-06</h2><p>经过不懈的努力在5月6日的时候全新博客正式编写完成</p><h3 id="重大更新"><a href="#重大更新" class="headerlink" title="重大更新"></a>重大更新</h3><p>个人博客2.0即将上线，尽情期待！！！</p><h2 id="2021-05-01"><a href="#2021-05-01" class="headerlink" title="2021-05-01"></a>2021-05-01</h2><h3 id="重大更新-1"><a href="#重大更新-1" class="headerlink" title="重大更新"></a>重大更新</h3><p>个人博客2.0即将上线，尽情期待！！！</p><h2 id="2021-04-30"><a href="#2021-04-30" class="headerlink" title="2021-04-30"></a>2021-04-30</h2><h3 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h3><p>今天就是四月的最后一天，上午差点睡过头迟到，就差了一分钟。在公交车上俊劫和我说他要买一台<br>34寸的显示器？疯了？我这台27寸的放在我桌子上我都嫌太大了，他竟然说要买34寸的😒😒😒😒，<br>然后因为最近在编写小程序购物车页面，虽然不能进行本地调试但是代码碎片还是要写的，不然到时候项目进度真的就跟不上了</p><h3 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h3><p>思考了很多东西，当然不是学习上的东西😂。可能和临近放假有关系，整个下午都不在状态<br>但还是压着神经把小程序的demo写完了。<br>快下班的时候家里就发微信问我出发没有，当然在这里的时候我认为的是想让我早点回去。可是等我到家的时候我发现和我想的有点出入，<br>我到家刚刚十二点整，不多一分，不多一秒。然后我怀着期待的心情走进家门的时候不是儿子回来了，而是狗子回来了（我家猫），我带着我的猫一起回来的<br>然后从我手中接过猫就上了楼–。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>祝大家都能过一个愉快的节日，天天能睡到自然醒。</p><h2 id="2021-04-29"><a href="#2021-04-29" class="headerlink" title="2021-04-29"></a>2021-04-29</h2><p>整天无所事事，敲了一天的小程序，昨天晚上凌晨四点才睡<br>七天的开发周期是在让我有点脑阔痛，<br>而且还是用原生的开发，并且本地还不能调试人傻了<br>算法五一的时候在推送吧最近脑子有点不好使</p><h2 id="2021-04-28"><a href="#2021-04-28" class="headerlink" title="2021-04-28"></a>2021-04-28</h2><h3 id="上午-1"><a href="#上午-1" class="headerlink" title="上午"></a>上午</h3><p>又简单的过了一下vue3</p><h3 id="下午-1"><a href="#下午-1" class="headerlink" title="下午"></a>下午</h3><p>午觉一起来就被叫去开会了从两点钟一直开到晚上七点🥲</p><h2 id="2021-04-26"><a href="#2021-04-26" class="headerlink" title="2021-04-26"></a>2021-04-26</h2><h3 id="上午-2"><a href="#上午-2" class="headerlink" title="上午"></a>上午</h3><p>昨天简单的写了一个React+Typescript+Zent后台，但是早上编写的时候发现通过require.context引入路由路径的方法有点问题<br>于是改动了一下。临近中午吃饭的时候在知乎发现了一篇毁三观的散文，挺有意思的🤤。</p><h3 id="下午-2"><a href="#下午-2" class="headerlink" title="下午"></a>下午</h3><p>pm把我们拉进去开了一个简单的敏捷开发扫盲会，团队同事之间简单的介绍了一下自己。然后制定了前端后端之间的DOD<br>然后我们前端制定的DOD分为五点</p><ul><li>页面达到设计效果</li><li>不同设备的兼容性</li><li>功能逻辑完整</li><li>页面性能达到要求</li><li>符合代码规范</li></ul><p>出来以后简单的学了一下vue3，发现通过setup函数解构出去的变量不会被监听到🧐</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//不会响应</span><br>&lt;template&gt;<br>    &lt;div&gt;<br>        &#123;&#123;name&#125;&#125;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">const</span> state = &#123;<br>                name: <span class="hljs-string">&#x27;this is vue3&#x27;</span><br>            &#125;;<br>            <span class="hljs-keyword">return</span> &#123;...state&#125;<br>        &#125;   <br>    &#125;<br>&lt;/script&gt;<br><br><span class="hljs-comment">//会响应</span><br>&lt;template&gt;<br>    &lt;div&gt;<br>        &#123;&#123;state.name&#125;&#125;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">const</span> state = &#123;<br>                 name: <span class="hljs-string">&#x27;this is vue3&#x27;</span><br>            &#125;;<br>        <span class="hljs-keyword">return</span> &#123;state&#125;<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>也是第一次试vue3，还是需要慢慢来的。</p><h2 id="2021-04-25"><a href="#2021-04-25" class="headerlink" title="2021-04-25"></a>2021-04-25</h2><p>由于公司里面要用zent，没看过所以今天花了半天的时间用来写了一个简单的<a href="https://github.com/HyoukaM/React-Typescript-zent">后台</a></p><h2 id="2021-04-24"><a href="#2021-04-24" class="headerlink" title="2021-04-24"></a>2021-04-24</h2><p>公寓通知将停水至下午，很无奈为了节省早饭钱和中饭去，一直睡到下午🐶🐶🐶(理财专家)。<br>然后四点多的时候去买了点食材，到家八点多了吧，然后温故了红宝石第四版。</p><h2 id="2021-04-23"><a href="#2021-04-23" class="headerlink" title="2021-04-23"></a>2021-04-23</h2><p>思考了一下怎么样在React中将</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-keyword">switch</span>&gt;<br>    &lt;Router&gt;<br>        &lt;Route component/&gt;<br>        &lt;Route component/&gt;<br>        &lt;Route component/&gt;<br>        &lt;Route component/&gt;<br>    &lt;/Router&gt;<br>&lt;/<span class="hljs-keyword">switch</span>&gt;<br></code></pre></td></tr></table></figure><p>的形式转换为vue当中的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        name: <span class="hljs-string">&#x27;&#x27;</span>,<br>        component: Vue.Component | <span class="hljs-built_in">Promise</span>&lt;Vue.Component&gt;,<br>        path: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>]<br></code></pre></td></tr></table></figure><p>形式，参考了我原有的经验完成(小小的不足，不能实现Promise)</p><h2 id="消失的时间"><a href="#消失的时间" class="headerlink" title="消失的时间"></a>消失的时间</h2><p>中间跳了一段，我也忘记我中间干了啥了</p><h2 id="2021-04-20"><a href="#2021-04-20" class="headerlink" title="2021-04-20"></a>2021-04-20</h2><h3 id="上午-3"><a href="#上午-3" class="headerlink" title="上午"></a>上午</h3><p>一到公司就非常难受了，为什么难受呢，因为我搭建的github与travis两者的分支不能进行同步，<br>所以我昨儿晚上写的东西就没办法更新到GitHub的分支上面，还好公司网络面向全球，于是乎我就<br>打开了面向程序员<a href="https://www.google.com/">Google</a>可是无果，并没有遇到我这种情况的人，<br>于是我又又又厚着脸皮去找了昨儿加的老哥，以后都简称俊劫了。 可是估计他也在忙，并没有鸟我😯，<br>然后我就自个捣鼓，因为travis现在有两个网站 ，一个是<a href="https://www.travis-ci.org/">travis-ci.org</a>,<br>一个是<a href="https://www.travis-ci.com/">travis-ci.com</a>, 而我关联的是<a href="https://www.travis-ci.org/">travis-ci.org</a><br>并且我在<a href="https://www.travis-ci.com/">travis-ci.com</a> 上没有看见我GitHub上面的博客的仓库，我就想会不会和这个有关系，<br>然后英语不好的我就打开了Chrome的Google翻译软件把整个页面翻译了一遍，发现了一个迁移入口，从<a href="https://www.travis-ci.org/">travis-ci.org</a><br>迁移到<a href="https://www.travis-ci.com/">travis-ci.com</a> 上面，我尝试了一下，你猜怎么着，哎好了，我就是玩儿。然后呢俊劫中午吃饭的时候给我发了一句<br><code>理论上来说应该是同步的</code>我直接🙄🙄🙄。</p><h3 id="下午-3"><a href="#下午-3" class="headerlink" title="下午"></a>下午</h3><p>紧接着在上午的时候解决了travis和GitHub不同步的问题，写了力扣上剑指offer的两道题目吧，一道关于双指针问题，一道关于十进制最大边界值的问题，两道题目就目前对于我来说还算挺简单的</p><h3 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h3><p>日常的晚点下班，回到家日常怀疑人生。</p><h2 id="2021-04-19"><a href="#2021-04-19" class="headerlink" title="2021-04-19"></a>2021-04-19</h2><h3 id="日常不要脸"><a href="#日常不要脸" class="headerlink" title="日常不要脸"></a>日常不要脸</h3><p>可以说非常的巧合吧，翻阅掘金的时候无意间看到一个老哥也在有赞上班，<br>于是非常不要脸的加上了他的微信，然后请教了他一些问题</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度拷贝工具类</title>
      <link href="deepCopy/%E6%B7%B1%E5%BA%A6%E6%8B%B7%E8%B4%9D%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>deepCopy/%E6%B7%B1%E5%BA%A6%E6%8B%B7%E8%B4%9D%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeepCopy</span></span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>obj 需要拷贝的对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>to(?any) 拷贝的目标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>copyEmptyValue(boolean) 是否拷贝空值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>fiexd(?boolean) 是否保留小数点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param </span>replaceArray(?boolean)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@returns <span class="hljs-type">&#123;&#123;&#125;</span></span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">deepCopy</span>(<span class="hljs-params">obj, to, copyEmptyValue = <span class="hljs-literal">true</span>, fiexd, replaceArray</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (!obj) <span class="hljs-keyword">return</span> &#123;&#125;;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(to) &amp;&amp; replaceArray) &#123;<br>            <span class="hljs-built_in">this</span>.deepCopy(obj, [], copyEmptyValue);<br>        &#125;<br>        <span class="hljs-keyword">const</span> objClone = to ? to : (<span class="hljs-built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;);<br>        <span class="hljs-keyword">if</span> (obj &amp;&amp; <span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>            <span class="hljs-keyword">const</span> keys = <span class="hljs-built_in">Object</span>.keys(obj);<br>            <span class="hljs-keyword">let</span> key: string;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; keys.length; i++) &#123;<br>                key = keys[i];<br>                <span class="hljs-keyword">if</span> (obj[key] &amp;&amp; <span class="hljs-keyword">typeof</span> obj[key] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; !(obj[key] <span class="hljs-keyword">instanceof</span> Element)) &#123;<br>                    <span class="hljs-comment">//判断ojb子元素是否为对象，且不是 dom ，如果是，递归复制</span><br>                    objClone[key] = <span class="hljs-built_in">this</span>.deepCopy(obj[key], objClone[key], copyEmptyValue, replaceArray);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (copyEmptyValue || (obj[key] != <span class="hljs-literal">undefined</span> &amp;&amp; obj[key] != <span class="hljs-literal">null</span>)) &#123;<br>                    objClone[key] = obj[key];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> objClone;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 58 - II. 左旋转字符串</title>
      <link href="reverseLeftWords/%E5%89%91%E6%8C%87-offer-58-ii-%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>reverseLeftWords/%E5%89%91%E6%8C%87-offer-58-ii-%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: s = <span class="hljs-string">&quot;abcdefg&quot;</span>, k = <span class="hljs-number">2</span><br>输出: <span class="hljs-string">&quot;cdefgab&quot;</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: s = <span class="hljs-string">&quot;lrloseumgh&quot;</span>, k = <span class="hljs-number">6</span><br>输出: <span class="hljs-string">&quot;umghlrlose&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> reverseLeftWords = <span class="hljs-function">(<span class="hljs-params">s = <span class="hljs-string">&quot;abcdefg&quot;</span>, k = <span class="hljs-number">2</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> stringSlice = s.slice(<span class="hljs-number">0</span>, k);<br>  <span class="hljs-keyword">const</span> prveSlice = s.slice(k, s.length);<br>  <span class="hljs-keyword">return</span> prveSlice + stringSlice;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 58 - I. 翻转单词顺序</title>
      <link href="reverseWords/%E5%89%91%E6%8C%87-offer-58-i-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F/"/>
      <url>reverseWords/%E5%89%91%E6%8C%87-offer-58-i-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串”I am a student. “，则输出”student. a am I”。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: <span class="hljs-string">&quot;the sky is blue&quot;</span><br>输出: <span class="hljs-string">&quot;blue is sky the&quot;</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: <span class="hljs-string">&quot; hello world! &quot;</span><br>输出:<span class="hljs-string">&quot;world! hello&quot;</span><br>解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reverseWords = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> stringSplit = s.split(<span class="hljs-string">&#x27; &#x27;</span>);<br>  <span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = stringSplit.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">if</span> (stringSplit[i] !== <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>      string += <span class="hljs-string">&#x27; &#x27;</span> + stringSplit[i];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> string.trim()<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 57. 和为 s 的两个数字</title>
      <link href="twoSum/%E5%89%91%E6%8C%87-offer-57-%E5%92%8C%E4%B8%BA-s-%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/"/>
      <url>twoSum/%E5%89%91%E6%8C%87-offer-57-%E5%92%8C%E4%B8%BA-s-%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入：nums = [<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>], target = <span class="hljs-number">9</span><br>输出：[<span class="hljs-number">2</span>,<span class="hljs-number">7</span>] 或者 [<span class="hljs-number">7</span>,<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入：nums = [<span class="hljs-number">10</span>,<span class="hljs-number">26</span>,<span class="hljs-number">30</span>,<span class="hljs-number">31</span>,<span class="hljs-number">47</span>,<span class="hljs-number">60</span>], target = <span class="hljs-number">40</span><br>输出：[<span class="hljs-number">10</span>,<span class="hljs-number">30</span>] 或者 [<span class="hljs-number">30</span>,<span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><p>话不多说直接暴力</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> twoSum = <span class="hljs-function">(<span class="hljs-params">nums = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>], target = <span class="hljs-number">9</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; nums.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] + nums[j] === target) &#123;<br>                <span class="hljs-keyword">return</span> [nums[i], nums[j]];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方法确实可行但是会超时于是我们换一种思路</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> twoSum = <span class="hljs-function">(<span class="hljs-params">nums = [<span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>], target = <span class="hljs-number">9</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思路定义最小值，最大边界，如果nums[left] + nums[right]一直不等于target</span><br><span class="hljs-comment">     * 我们就一直找</span><br><span class="hljs-comment">     * 其中如果nums[left] + nums[right] &gt; target</span><br><span class="hljs-comment">     * 则正确答案在left - right之间排除right;</span><br><span class="hljs-comment">     * 否则正确答案在left - right之间排除left</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@type <span class="hljs-type">&#123;number&#125;</span></span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (nums[left] + nums[right] !== target) &#123;<br>        <span class="hljs-keyword">if</span>(nums[left] + nums[right] &gt; target) &#123;<br>            right --;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            left ++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [nums[left], nums[right]];<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 53 - I. 在排序数组中查找数字 I</title>
      <link href="search/%E5%89%91%E6%8C%87-offer-53-i-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97-i/"/>
      <url>search/%E5%89%91%E6%8C%87-offer-53-i-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%95%B0%E5%AD%97-i/</url>
      
        <content type="html"><![CDATA[<p>统计一个数字在排序数组中出现的次数。</p><p>示例 1:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: nums = [<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>], target = <span class="hljs-number">8</span><br>输出: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: nums = [<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>], target = <span class="hljs-number">6</span><br>输出: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>简单的思路设定一个初始值0，循环数组，如果target === i; count ++则可得出答案</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> search = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> nums) &#123;<br>        <span class="hljs-keyword">if</span>(target === i) &#123;<br>            count++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;;<br></code></pre></td></tr></table></figure><p>二分查找思路</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> search = <span class="hljs-function">(<span class="hljs-params">nums, target</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> difference = <span class="hljs-function">(<span class="hljs-params">nums, target</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//0, 5</span><br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>      <span class="hljs-comment">//5/2 = 2;</span><br>      <span class="hljs-comment">// 8/2 = 4;</span><br>      <span class="hljs-comment">// 10/2 = 5;</span><br>      <span class="hljs-keyword">let</span> mid = <span class="hljs-built_in">parseInt</span>((left + right) / <span class="hljs-number">2</span>);<br>      <span class="hljs-comment">//7&gt;8; left = 2 + 1;</span><br>      <span class="hljs-comment">//8&gt;8; left = 4 + 1;</span><br>      <span class="hljs-comment">//10&gt;8; right = 5 - 1;</span><br>      <span class="hljs-keyword">if</span> (nums[mid] &gt; target) &#123;<br>        right = mid - <span class="hljs-number">1</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        left = mid + <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> left;<br>  &#125;<br>  <span class="hljs-comment">//分别取target的最大边界值和target-1的最大边界值相减就可得出</span><br>  <span class="hljs-keyword">return</span> difference(nums, target) - difference(nums, target - <span class="hljs-number">1</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 53 - II. 0～n-1 中缺失的数字</title>
      <link href="missingNumber/%E5%89%91%E6%8C%87-offer-53-ii-0%EF%BD%9En-1-%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>missingNumber/%E5%89%91%E6%8C%87-offer-53-ii-0%EF%BD%9En-1-%E4%B8%AD%E7%BC%BA%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。</p><p>示例 1:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]<br>输出: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>输出: <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>这道题目其实就是二分查找</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> missingNumber = <span class="hljs-function">(<span class="hljs-params">nums = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//0, 8;</span><br>  <span class="hljs-comment">//5, 8;</span><br>  <span class="hljs-comment">//5, 7;</span><br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-comment">// mid = 4;</span><br>    <span class="hljs-comment">// mid = 4;</span><br>    <span class="hljs-comment">// mid = 6;</span><br>    <span class="hljs-keyword">const</span> mid = <span class="hljs-built_in">parseInt</span>((left + right) / <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">console</span>.log(left, right, left + right);<br>    <span class="hljs-built_in">console</span>.log(mid);<br><br>    <span class="hljs-comment">// 5 === 4 : right = mid - 1 = 3;</span><br>    <span class="hljs-comment">// 6 === 6 ? left = mid + 1 = 7;</span><br>    <span class="hljs-keyword">if</span> (nums[mid] === mid) &#123;<br>      left = mid + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      right = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> left;<br>  <span class="hljs-comment">// console.log(left);</span><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 45. 把数组排成最小的数</title>
      <link href="minNumber/%E5%89%91%E6%8C%87-offer-45-%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/"/>
      <url>minNumber/%E5%89%91%E6%8C%87-offer-45-%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p><p>示例 1:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: [<span class="hljs-number">10</span>,<span class="hljs-number">2</span>]<br>输出: <span class="hljs-string">&quot;102&quot;</span><br></code></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: [<span class="hljs-number">3</span>,<span class="hljs-number">30</span>,<span class="hljs-number">34</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>]<br>输出: <span class="hljs-string">&quot;3033459&quot;</span><br></code></pre></td></tr></table></figure><p>这道题就是a+b &gt; b+a ? a = b; b = a : a = a; b = b;</p><p>首先利用内置函数sort进行快速排序</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> minNumber = <span class="hljs-function">(<span class="hljs-params">nums = [<span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">34</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>]</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> nums.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> (<span class="hljs-string">&#x27;&#x27;</span> + a + b) - (<span class="hljs-string">&#x27;&#x27;</span> + b + a)).join(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>以上是我能想到最快的方法，能力有限<br>其实就是快速排序<br>这里参考<a href="https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/solution/song-gei-qian-duan-de-tong-xue-kan-bu-do-4fko/">落落落洛克</a> 的题解</p><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs javascript/**"> * @param &#123;number[]&#125; nums<br> * @return &#123;string&#125;<br> *&#x2F;<br>&#x2F;&#x2F; 理解题意 可以发现<br>&#x2F;&#x2F; 把数字a b拼接成字符串 比较a+b b+a<br>&#x2F;&#x2F; a+b b+a<br>&#x2F;&#x2F; var minNumber &#x3D; function(nums) &#123;<br>&#x2F;&#x2F;   return nums.sort((a, b) &#x3D;&gt; (&#39;&#39; + a + b) - (&#39;&#39; + b + a)).join(&#39;&#39;);<br>&#x2F;&#x2F; &#125;<br><br><br>function minNumber(nums) &#123;<br>    &#x2F;&#x2F;[3,30,34,5,9], 0, 4;<br>quickSort(nums, 0, nums.length - 1);<br>return nums.join(&#39;&#39;);<br>&#125;<br>&#x2F;&#x2F; ! 该题其实考查的就是排序 但是对比大小的条件变了  数字的话根据大小来比<br>&#x2F;&#x2F; ! 把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个  满足这种对比是根据 a+b 和 b+a的比较 决定排序位置<br>function quickSort(nums, l, r) &#123;<br>if (l &gt;&#x3D; r) return<br>let i &#x3D; l,<br>j &#x3D; r<br>tmp &#x3D; nums[i]<br>const pivot &#x3D; l<br>while (i &lt; j) &#123;<br>while (&#39;&#39; + nums[j] + nums[pivot] - (&#39;&#39; + nums[pivot] + nums[j]) &gt;&#x3D; 0 &amp;&amp; i &lt; j) j--<br>while (&#39;&#39; + nums[i] + nums[pivot] - (&#39;&#39; + nums[pivot] + nums[i]) &lt;&#x3D; 0 &amp;&amp; i &lt; j) i++<br>tmp &#x3D; nums[i]<br>nums[i] &#x3D; nums[j]<br>nums[j] &#x3D; tmp<br>&#125;<br>nums[i] &#x3D; nums[pivot]<br>nums[pivot] &#x3D; tmp<br>quickSort(nums, l, i - 1)<br>quickSort(nums, i + 1, r)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>👏👏一起写一个React+Typescript+Zent后台吧</title>
      <link href="zent/%F0%9F%91%8F%F0%9F%91%8F%E4%B8%80%E8%B5%B7%E5%86%99%E4%B8%80%E4%B8%AAreact-typescript-zent%E5%90%8E%E5%8F%B0%E5%90%A7/"/>
      <url>zent/%F0%9F%91%8F%F0%9F%91%8F%E4%B8%80%E8%B5%B7%E5%86%99%E4%B8%80%E4%B8%AAreact-typescript-zent%E5%90%8E%E5%8F%B0%E5%90%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>由于公司H5采用vue，小程序采用原生，后台采用react+typescript+zent的形式。而个人使用的react结合库的话用得多的是antd，所以来用zent简单的来搭建一个后台吧。</p></blockquote><blockquote><p><a href="https://hyoukam.github.io/React-Typescript-zent/#/login">预览地址</a> <br/><br><a href="https://github.com/HyoukaM/React-Typescript-zent">源码地址</a> <br/><br><a href="https://juejin.cn/post/6955128377346883620?utm_source=gold_browser_extension">掘金</a></p></blockquote><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p><a href="https://youzan.github.io/zent/zh/guides/install">zent</a> 是有赞开发的一套基于WebUI规范的一套react业务组件库，并且有赞还特意为zent写了babel-plugin-zent来结合zent库进行按需加载</p><h2 id="使用技术栈"><a href="#使用技术栈" class="headerlink" title="使用技术栈"></a>使用技术栈</h2><ul><li><a href="https://react.docschina.org/">React</a></li><li><a href="https://www.tslang.cn/">Typescript</a></li><li><a href="https://youzan.github.io/zent/zh/guides/install">zent</a></li><li><a href="https://dvajs.com/">dva</a></li><li><a href="https://www.npmjs.com/package/@craco/craco">craco</a> 或者 <a href="https://github.com/timarney/react-app-rewired/">react-app-rewired</a></li><li><a href="https://reactrouter.com/web/guides/quick-start">React-Router-Dom</a></li></ul><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>创建react+typescript项目，我们还是采用官方的命令 npx create-react-app name –template typescript<br>创建好项目以后的目录结构 </p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/HyoukaM/HyoukaM.github.io/docs/docs/.vuepress/public/react/zent/img.png" alt="目录结构"></p><ul><li>src项目目录<ul><li>App.tsx官方用例</li><li>index.tsx主入口文件(创建react实例)</li></ul></li><li>tsconfig(ts配置文件)    </li></ul><p>接下来我们将src进行改造一下</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/HyoukaM/HyoukaM.github.io/docs/docs/.vuepress/public/react/zent/img_1.png" alt="目录结构"></p><ul><li>src-项目目录<ul><li>assets-资源存放目录</li><li>components-全局组件存放目录</li><li>interface-接口存放目录</li><li>layout-布局组件</li><li>modules-redux模块存放目录</li><li>router-路由存放目录</li><li>utils-工具类存放目录</li><li>views-页面存放目录</li></ul></li><li>craco.config.js-配置webpack文件</li><li>paths.json-tsconfig的继承文件主要存放alias</li></ul><h3 id="配置alias"><a href="#配置alias" class="headerlink" title="配置alias"></a>配置alias</h3><p>(npm run eject 的例外)由于react没有外置webpack配置文件，所以需要使用第三方库重新配置webpack，这里个人介绍两个。一个是craco，另一个是react-app-rewired,<br>本项目当中采用craco(我也是第一次，原来使用react-app-rewired)。npm install @craco/craco –save-dev 安装好后，根据文档的介绍在项目根目录创建一个craco.config.js文件<br>接着在文件里编写以下内容</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;resolve&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-built_in">module</span>.exports = &#123;<br>    webpack: &#123;<br>        alias: &#123;<br>            <span class="hljs-comment">//根据你的需求添加即可，例如我这边添加了别名@指向的src目录则我在项目中就可以用&#x27;@/&#x27;代替&#x27;./src&#x27;</span><br>            <span class="hljs-string">&#x27;@&#x27;</span>: resolve(__dirname, <span class="hljs-string">&#x27;./src&#x27;</span>) <br>        &#125;,<br>    &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>接着将package.json里面的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;react-scripts start&quot;</span>,<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;react-scripts build&quot;</span>,<br>    <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;react-scripts test&quot;</span>,<br>    <span class="hljs-string">&quot;eject&quot;</span>: <span class="hljs-string">&quot;react-scripts eject&quot;</span><br>  &#125;,<br>改成<br>    <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;craco start&quot;</span>,<br>        <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;craco build&quot;</span>,<br>        <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;craco test&quot;</span>,<br>        <span class="hljs-string">&quot;eject&quot;</span>: <span class="hljs-string">&quot;craco eject&quot;</span><br>    &#125;,<br></code></pre></td></tr></table></figure><p>其实按照正常逻辑来说这样子别名就已经生效了，但是在ts项目当中不同，我们需要在tsconfig当中同步我们的alias设置<br>所以我们需要在tsconfig的compilerOptions当中添加 </p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>,<br><span class="hljs-string">&quot;paths&quot;</span>: &#123;<br><span class="hljs-string">&quot;@/*&quot;</span>: [<span class="hljs-string">&quot;src/*&quot;</span>],<br>&#125;<br></code></pre></td></tr></table></figure><p>这四行代码，然后我们通过start命令启动。但是当你启动后，你会发现你的别名还是没有生效(这个bug其实我也不知道为什么)，就是当你通过craco或者react-app-rewired来启动项目的时候<br>刚刚tsconfig当中添加的paths代码会消失。反正我解决不了，所以通过另外一种方式来解决。通过tsconfig当中的extends属性创建一个新的文件也就是上面所说的paths.json继承进来，他总不至于说<br>把我文件都删了吧🐶🐶。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//paths.json</span><br>&#123;<br>    <span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;baseUrl&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>,<br>        <span class="hljs-string">&quot;paths&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;@/*&quot;</span>: [<span class="hljs-string">&quot;src/*&quot;</span>]<br>    &#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>接着在tsconfig中添加extends: 你的paths文件路径建议放在同级，然后我们在启动就会发现我们的别名已经生效了</p><h3 id="dva注册"><a href="#dva注册" class="headerlink" title="dva注册"></a>dva注册</h3><p>不熟悉dva的朋友可以去dva的官网去看一下文档，dva的注册和ReactDOM的注册可能会有些差异</p><h4 id="ReactDOM"><a href="#ReactDOM" class="headerlink" title="ReactDOM"></a>ReactDOM</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">ReactDOM.render(<br>    &lt;div&gt;<br>        <span class="hljs-number">123</span><br>    &lt;/div&gt;,<br>    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#root&#x27;</span>),<br>)<br></code></pre></td></tr></table></figure><h4 id="dva"><a href="#dva" class="headerlink" title="dva"></a>dva</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = dva();<br>app.start(<span class="hljs-string">&#x27;#root&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">new</span> Vue(&#123;<br>    <br>&#125;).$mount(HTMLElement)<br></code></pre></td></tr></table></figure><p>是不是发现dva的注册其实和vue比较相似(其他他封装的redux和vuex更像🐶🐶);<br>我们需要将index的ReactDOM改成上面dva的形式，请确保你的项目能够正常启动才确保进行后面的内容</p><h3 id="布局容器编写"><a href="#布局容器编写" class="headerlink" title="布局容器编写"></a>布局容器编写</h3><p>什么是布局容器，后台系统(可以参考antd-pro)，他就是分为三块，左边的sildbar，右上的用户反馈部分，<br>以及其下方的路由容器，实际上点击左边的slider只是切换了路由容器里面所对应的组件罢了</p><ul><li>layout<ul><li>UserLayout-用户没有登陆的时候可以看到的内容</li><li>BaseLayout-用户登陆以后实际看到的内容</li></ul></li></ul><p>我们首先编写UserLayout</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//由于我这只有一个登陆页面所以我就直接将登陆的组件写到了这个里面，如果有多个页面是用户不登陆就可以看到的则可以参照BaseLayout和router的配置更改即可</span><br><span class="hljs-keyword">import</span> &#123;<br>    Form,<br>    FormStrategy,<br>    FormInputField,<br>    Validators,<br>    Button<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;source/_posts/frontEnd/react/zent&#x27;</span>;<br><br>首先我们根据zent的form官方例子引入相应的组件<br><span class="hljs-keyword">const</span> UserLayout = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">//form实例</span><br>    <span class="hljs-keyword">const</span> form = Form.useForm(FormStrategy.View);<br>    <span class="hljs-comment">//按钮加载状态</span><br>    <span class="hljs-keyword">const</span> [lazy, setLazy] = useState &lt; boolean &gt; (<span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// 提交表单的触发事件</span><br>    <span class="hljs-keyword">const</span> onSubmit = useCallback(<span class="hljs-function"><span class="hljs-params">form</span> =&gt;</span> &#123;<br>        setLazy(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//确保在进行成功回掉事件的时候已经进行表单验证</span><br>        form.getValue();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>            <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">1000</span>);<br>        &#125;)<br>    &#125;, []);<br>    <span class="hljs-comment">//自动填充用户名密码</span><br>    <span class="hljs-keyword">const</span> onSubLaySubmit = useCallback(<span class="hljs-function">() =&gt;</span> &#123;<br>        setLazy(<span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            form.initialize(&#123;<br>                username: <span class="hljs-string">&#x27;Hyouka&#x27;</span>,<br>                password: <span class="hljs-string">&#x27;123456&#x27;</span><br>            &#125;);<br>            onSubmitSuccess();<br>        &#125;, <span class="hljs-number">1000</span>);<br>    &#125;, []);<br>    <span class="hljs-comment">//成功回调函数会在resolve之后调用</span><br>    <span class="hljs-keyword">const</span> onSubmitSuccess = useCallback(<span class="hljs-function">() =&gt;</span> &#123;<br>        setLazy(<span class="hljs-literal">false</span>);<br>    &#125;, [])<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div className=<span class="hljs-string">&#x27;user-login-container&#x27;</span>&gt;<br>            &lt;div className=<span class="hljs-string">&#x27;user-login-container-form&#x27;</span>&gt;<br>                &lt;header&gt;Hyouka&lt;/header&gt;<br>                &lt;Form<br>                    layout=<span class="hljs-string">&#x27;horizontal&#x27;</span><br>                    form=&#123;form&#125;<br>                    onSubmit=&#123;onSubmit&#125;<br>                    onSubmitSuccess=&#123;onSubmitSuccess&#125;<br>                &gt;<br>                    &lt;FormInputField<br>                        name=<span class="hljs-string">&#x27;username&#x27;</span><br>                        helpDesc=<span class="hljs-string">&quot;用户名: Hyouka&quot;</span><br>                        required=<span class="hljs-string">&quot;请填写用户名&quot;</span><br>                    /&gt;<br>                    &lt;FormInputField<br>                        name=<span class="hljs-string">&#x27;password&#x27;</span><br>                        props=&#123;&#123;<br>                            type: <span class="hljs-string">&#x27;password&#x27;</span><br>                        &#125;&#125;<br>                        helpDesc=<span class="hljs-string">&#x27;密码随便填，只能填数字，字母形式&#x27;</span><br>                        required=<span class="hljs-string">&#x27;请填写密码&#x27;</span><br>                        validators=&#123;[<br>                            Validators.pattern(<span class="hljs-regexp">/^[a-zA-Z0-9]+$/</span>, <span class="hljs-string">&#x27;只允许英文字母和数字&#x27;</span>),<br>                        ]&#125;<br>                    /&gt;<br>                    &lt;div className=<span class="hljs-string">&#x27;user-login-container-form-action&#x27;</span>&gt;<br>                        &lt;Button loading=&#123;lazy&#125; htmlType=<span class="hljs-string">&#x27;submit&#x27;</span>&gt;登陆&lt;/Button&gt;<br>                        &lt;Button onClick=&#123;onSubLaySubmit&#125; loading=&#123;lazy&#125;&gt;懒得填点我&lt;/Button&gt;<br>                    &lt;/div&gt;<br>                &lt;/Form&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;;<br></code></pre></td></tr></table></figure><p>写完以上内容一个简单的用户名密码登陆页面就出来</p><p>其次我们接着写BaseLayout，刚刚说过在后台当中，用户所看到的内容其实就是这一块路由组件的切换<br><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/HyoukaM/HyoukaM.github.io/docs/docs/.vuepress/public/react/zent/img_2.png" alt="路由"><br>所以我们可以围绕这一点在设计路由和布局</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//BaseLayout</span><br><span class="hljs-keyword">const</span> BaseLayout = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span>(<br>          &lt;div className=<span class="hljs-string">&#x27;layout&#x27;</span>&gt;<br>            &lt;div className=<span class="hljs-string">&#x27;layout-slide&#x27;</span>&gt;<br>              这边就是导航栏<br>            &lt;/div&gt;<br>            &lt;div className=<span class="hljs-string">&#x27;layout-content&#x27;</span>&gt;<br>              &lt;Header/&gt;<br>              &lt;div className=<span class="hljs-string">&#x27;layout-content-body&#x27;</span>&gt;<br>                &lt;Switch&gt;<br>                  这边就是我们要子路由<br>                &lt;/Switch&gt;<br>              &lt;/div&gt;<br>            &lt;/div&gt;<br>          &lt;/div&gt;<br>  )<br>&#125;;<br></code></pre></td></tr></table></figure><p>通过以上代码我们的UserLayout和BaseLayout就设计完成了，接下来我们就设计我们的路由</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>首先路由知识点如果不熟悉的话，可以去看一下我最开头给出的链接</p><p>由于我个人比较懒，所以我喜欢那种写一遍就能出来的东西，所以我们写一个自动化配置路由的方法<br>首先在router文件夹下创建两个文件</p><ul><li>router.txs(用于管理路由信息表，类似于vue当中的)<ul><li>```<br>const routes = [<pre><code>  &#123;     name: &#39;&#39;,     path: &#39;&#39;,     component: &#39;&#39;,     redirect: &#39;&#39;,     等等 &#125;</code></pre>]     <figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">* react-router-render(用于将component通过route的render函数渲染出来)<br><br><span class="hljs-comment">#### router.tsx</span><br><br>```javascript<br>import createRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/router/react-router-config&quot;</span>;<br>通过<span class="hljs-keyword">require</span>.context(路径，是否取子目录，匹配规则)的方法将你的组件统一取出来<br>比如说你views下面有<br>* views<br>    * home<br>        * Home.tsx<br>则他将会输出[<span class="hljs-string">&#x27;../views/home/Home.tsx&#x27;</span>]形式的字符串数组；<br><span class="hljs-keyword">const</span> views = <span class="hljs-keyword">require</span>.context(<span class="hljs-string">&#x27;../views&#x27;</span>, <span class="hljs-literal">true</span>, /\.tsx$/);<br><span class="hljs-comment">//取到.tsx前面的单词，用作我们的routes的name值</span><br><span class="hljs-keyword">const</span> capital = /.*\/(.+)\.tsx$/g;<br><span class="hljs-comment">//通过遍历的形式取到数组当中的每一个路径</span><br><span class="hljs-keyword">const</span> baseChildren = views.keys().map((view: <span class="hljs-keyword">string</span>) =&gt; &#123;<br>    <span class="hljs-comment">//取到name</span><br>    <span class="hljs-keyword">const</span> name = capital.exec(view) &amp;&amp; capital.exec(view)[<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">//这边是以模块导入的形式加载component所以要加上default才是正确的取得方式</span><br>    <span class="hljs-keyword">const</span> component = views(view).<span class="hljs-keyword">default</span>;<br>    <span class="hljs-comment">//由于我们的组件名是大写所以我们叫改成小写</span><br>    <span class="hljs-keyword">const</span> path = `/$&#123;name.toLowerCase()&#125;`;<br>    <span class="hljs-keyword">return</span> &#123;<br>        name,<br>        component,<br>        path<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//emmm我写完之后其实考虑了一下上面的这个其实有个bug，就是当你在多一级的时候这个path就不对了，这个等后面在考虑吧🤪🤪🤪</span><br>RouterConfig = &#123;<br>  name: <span class="hljs-keyword">string</span>;<br>  path: <span class="hljs-keyword">string</span>;<br>  component: React.ReactNode | <span class="hljs-function"><span class="hljs-keyword">Function</span></span>;<br>  meta?: &#123;<br>    icon?: <span class="hljs-keyword">string</span> | React.ReactNode;<br>    title?: <span class="hljs-keyword">string</span>;<br>  &#125;;<br>  redirect?: <span class="hljs-keyword">string</span>,<br>  <span class="hljs-comment">//这边一开始考虑的是用children但是children在react-props当中是关键字，所以换了一个</span><br>  routes?: <span class="hljs-keyword">Array</span>&lt;T&gt;;<br>&#125;;<br><span class="hljs-keyword">const</span> routes: <span class="hljs-keyword">Array</span>&lt;RouterConfig&gt; = [<br>    <span class="hljs-comment">//由于UserLayout和BaseLayout都是最为最顶级的容器，所以我就写死了🐶🐶</span><br>    &#123;<br>        path: <span class="hljs-string">&#x27;/login&#x27;</span>,<br>        component: () =&gt; import(<span class="hljs-string">&#x27;@/layout/UserLayout&#x27;</span>),<br>        name: <span class="hljs-string">&#x27;UserLayout&#x27;</span>,<br>    &#125;,<br>    &#123;<br>        path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;BaseLayout&#x27;</span>,<br>        component: () =&gt; import(<span class="hljs-string">&#x27;@/layout/BaseLayout&#x27;</span>),<br>        redirect: <span class="hljs-string">&#x27;/basis&#x27;</span>,<br>       <span class="hljs-comment">//主要是这里用到了懒人操作</span><br>        routes: baseChildren<br>    &#125;<br>];<br>export <span class="hljs-keyword">default</span> () =&gt; createRouter(routes);<br></code></pre></td></tr></table></figure><h4 id="reactRouterConfig"><a href="#reactRouterConfig" class="headerlink" title="reactRouterConfig"></a>reactRouterConfig</h4></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 注意AsyncRoute是和下面的分开的这边为了方便我就写在一起了</span><br><span class="hljs-keyword">import</span> Loading <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/loading/Loading&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AsyncRoute</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-comment">//定义一个初始值，用来加载一个loading效果</span><br>    <span class="hljs-built_in">this</span>.state = &#123;<br>      Com: <span class="hljs-literal">null</span>,<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-comment">//接收到传递过来的() =&gt; import(&#x27;&#x27;);</span><br>    <span class="hljs-keyword">const</span> &#123;render&#125; = <span class="hljs-built_in">this</span>.props;<br>    <span class="hljs-comment">//如果不是通过懒人配置进来的话就先判断是不是promise，是的话就取出default模块</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.prototype.toString.call(render()) === <span class="hljs-string">&#x27;[object Promise]&#x27;</span>) &#123;<br>      render().then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>          Com: res.default ? res.default : Loading<br>        &#125;);<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//是懒人进来的或者直接定义的是component: React.ReactNode则直接给了</span><br>      <span class="hljs-built_in">this</span>.setState(&#123;<br>        Com: render<br>      &#125;);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;Com&#125; = <span class="hljs-built_in">this</span>.state;<br>    <span class="hljs-keyword">const</span> &#123;location, self&#125; = <span class="hljs-built_in">this</span>.props;<br>    <span class="hljs-comment">//然后直接渲染就好了，注意self里面可能包含routes</span><br>    <span class="hljs-keyword">return</span> Com ? <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Com</span> &#123;<span class="hljs-attr">...self</span>&#125; &#123;<span class="hljs-attr">...location</span>&#125;/&gt;</span></span> : <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Loading</span>/&gt;</span></span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//react-router-config</span><br><br><span class="hljs-keyword">import</span> &#123;Redirect, Route, Switch&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;isArray, random&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;lodash&#x27;</span>;<br><span class="hljs-keyword">import</span> AsyncRoute <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/asyncRoute/AsyncRoute&quot;</span>;<br><br><span class="hljs-keyword">const</span> createRouter = <span class="hljs-function">(<span class="hljs-params">routes: <span class="hljs-built_in">Array</span>&lt;RouterConfig&gt;</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//将每个component通过route的render进行渲染</span><br>  <span class="hljs-keyword">const</span> createRoute = <span class="hljs-function">(<span class="hljs-params">route: RouterConfig</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;path, redirect, <span class="hljs-attr">component</span>: Com, ...arg&#125; = route;<br>    <span class="hljs-comment">//是否包含routes，如果包含则递归子</span><br>    <span class="hljs-keyword">if</span> (arg.routes &amp;&amp; isArray(arg.routes) &amp;&amp; arg.routes.length) &#123;<br>      arg.routes = arg.routes.map(<span class="hljs-function"><span class="hljs-params">childrenRoute</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> createRoute(childrenRoute);<br>      &#125;);<br>      <span class="hljs-comment">//如果有子集的话第一层路由肯定不是自己，所以需要在routes前面添加一个重定向组件，让他指向重定向所对应的path</span><br>      redirect &amp;&amp; arg.routes.unshift(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&#123;path&#125;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;redirect&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">redirect</span>&#125;<span class="hljs-attr">_</span>$&#123;<span class="hljs-attr">path</span>&#125;`&#125; <span class="hljs-attr">exact</span>/&gt;</span></span>)<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> render = &#123;<br>      key: path || random(),<br>      render: <span class="hljs-function">(<span class="hljs-params">&#123;...routeConfig&#125;</span>) =&gt;</span> &#123;<br>        &#123;<span class="hljs-comment">/*&lt;Com componentConfig=&#123;arg&#125; &#123;...routeConfig&#125;/&gt;*/</span>&#125;<br>        <span class="hljs-comment">//通过包裹一层loading效果的组件返回出去</span><br>        <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">AsyncRoute</span> <span class="hljs-attr">render</span>=<span class="hljs-string">&#123;Com&#125;</span> <span class="hljs-attr">self</span>=<span class="hljs-string">&#123;arg&#125;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&#123;routeConfig&#125;/</span>&gt;</span></span>)<br>      &#125;<br>    &#125;;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#123;path&#125;</span> &#123;<span class="hljs-attr">...render</span>&#125; /&gt;</span></span><br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> (<br>          &lt;Switch&gt;<br>            &#123;routes.map(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> createRoute(route))&#125;<br>          &lt;/Switch&gt;<br>  )<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createRouter;<br></code></pre></td></tr></table></figure><p>通过以上路由也已经完成接下来就是注册路由的，由于我们使用的dva所以我们得通过dva的方法来注册路由信息</p><h3 id="注册路由"><a href="#注册路由" class="headerlink" title="注册路由"></a>注册路由</h3><p>我们将index里面的代码稍作修改</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> createHashHistory = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;history&#x27;</span>).createHashHistory;<br>history = createHashHistory(&#123;<br>  basename: <span class="hljs-string">&#x27;/&#x27;</span><br>&#125;);<br><br><span class="hljs-keyword">const</span> app = dva(&#123;history&#125;);<br><br>app.router(<span class="hljs-function">() =&gt;</span> (<br>    &lt;HashRouter&gt;<br>        &lt;Router history=&#123;history&#125;&gt;<br>            &#123;renderRoute()&#125;<br>        &lt;/Router&gt;<br>    &lt;/HashRouter&gt;<br>))<br><br>app.start(<span class="hljs-string">&#x27;#root&#x27;</span>);<br></code></pre></td></tr></table></figure><p>完成以上操作后我们 yarn run start启动服务就能看到我们的页面，但是在登陆和为登陆之间用户还是能够进行操作的所以接下来我们进行登陆判断</p><h3 id="登陆权限"><a href="#登陆权限" class="headerlink" title="登陆权限"></a>登陆权限</h3><p>首先我们在modules下面创建一个login.ts模块</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//以下都是dva封装好的redux，如果不了解请通过最上面的dva链接</span><br><span class="hljs-keyword">import</span> &#123;Effect&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/interface/model&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123;EffectsCommandMap&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;dva&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;AnyAction&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span>;<br><br>type Effect = (<br>        action: AnyAction,<br>        effects: EffectsCommandMap,<br>) =&gt; <span class="hljs-keyword">void</span>;<br><br><span class="hljs-keyword">import</span> &#123;Reducer&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;clearLocal, setLocal&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/localstorage&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;history&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/utils/history&quot;</span>;<br><br><span class="hljs-keyword">export</span> interface LoginState &#123;<br>    user: string | unknown<br>&#125;<br><br>interface LoginType &#123;<br>    namespace: string;<br>    state: LoginState;<br>    effects: &#123;<br>        whetherLogin: Effect,<br>        logout: Effect,<br>    &#125;,<br>    reducers: &#123;<br>        changeWhetherLogin: Reducer&lt;string | unknown&gt;;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> loginModule: LoginType = &#123;<br>    <span class="hljs-comment">//模块名称，调用模块的话就要通过这个名字</span><br>    namespace: <span class="hljs-string">&#x27;loginModule&#x27;</span>,<br>   <span class="hljs-comment">//状态</span><br>    state: &#123;<br>        user: <span class="hljs-literal">undefined</span><br>    &#125;,<br>    <span class="hljs-comment">//用于处理异步操作和业务逻辑</span><br>    effects: &#123;<br>        <span class="hljs-comment">//payload为调用effects的时候传入的值，put是调用reducers的，call是调用你的异步操作</span><br>        * <span class="hljs-function"><span class="hljs-title">whetherLogin</span>(<span class="hljs-params">&#123;payload&#125;, &#123;put, call&#125;</span>)</span> &#123;<br>            <span class="hljs-keyword">const</span> &#123;user&#125; = payload;<br>            <span class="hljs-comment">//这边应该通过接口形式</span><br>            <span class="hljs-comment">// const res = call(loginServer, data);</span><br>            <span class="hljs-keyword">yield</span> put(&#123;<br>                type: <span class="hljs-string">&#x27;changeWhetherLogin&#x27;</span>,<br>                payload: user<br>            &#125;);<br>            <span class="hljs-comment">//我这边就直接通过输入的用户名来了</span><br>            setLocal(<span class="hljs-string">&#x27;username&#x27;</span>, user);<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-comment">//用于处理同步操作，唯一可以修改 state 的地方</span><br>    reducers: &#123;<br>        <span class="hljs-function"><span class="hljs-title">changeWhetherLogin</span>(<span class="hljs-params">state, &#123;payload&#125;</span>)</span> &#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                user: payload<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> loginModule;<br></code></pre></td></tr></table></figure><p>接着我们需要让dva知道我们编写了一个redux模块，还是稍微修改以下index.tsx</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = dva(&#123;history&#125;);<br>这个loginModule就是我们导出的模块，写一个注册一个写一个注册一个<br>当然🐶🐶，也有很懒的方法就是通过<span class="hljs-built_in">require</span>.context();找到modules下面的模块统一注册就好了，<br>太懒了懒得写了🤣<br>app.model(loginModule);<br><br>app.router(<span class="hljs-function">() =&gt;</span> (<br>    &lt;HashRouter&gt;<br>        &lt;Router history=&#123;history&#125;&gt;<br>            &#123;renderRoute()&#125;<br>        &lt;/Router&gt;<br>    &lt;/HashRouter&gt;<br>))<br><br>app.start(<span class="hljs-string">&#x27;#root&#x27;</span>);<br><br>然后我们重新启动服务我们的模块就被注册到了redux当中<br></code></pre></td></tr></table></figure><p>然后我们在对我们的上面编写的UserLayout和BaseLayout进行修改</p><h4 id="UserLayout"><a href="#UserLayout" class="headerlink" title="UserLayout"></a>UserLayout</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">type Dispatch = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">T</span> = <span class="hljs-string">any,</span> <span class="hljs-attr">callback</span> = <span class="hljs-string">(payload:</span> <span class="hljs-attr">T</span>) =&gt;</span> void&gt;(</span><br><span class="xml">        action: &#123;</span><br><span class="xml">          type: string;</span><br><span class="xml">          payload?: T;</span><br><span class="xml">          callback?: callback;</span><br><span class="xml">        &#125;</span><br><span class="xml">) =&gt; void;</span><br><br><span class="xml">GlobalDispatchComponentType = &#123;</span><br><span class="xml">  dispatch: Dispatch</span><br><span class="xml">&#125;</span><br><br>const UserLayout: React.FC&lt;GlobalDispatchComponentType&gt; = (&#123;dispatch&#125;) =&gt; &#123;<br>    const form = Form.useForm(FormStrategy.View);<br>    const history = useHistory();<br>    const [lazy, setLazy] = useState&lt;boolean&gt;(false);<br>    const onSubmit = useCallback(form =&gt; &#123;<br>        setLazy(true);<br>        form.getValue();<br>        return new Promise((resolve) =&gt; &#123;<br>            setTimeout(resolve, 1000);<br>        &#125;)<br>    &#125;, []);<br>    const onSubLaySubmit = useCallback(() =&gt; &#123;<br>        setLazy(true);<br>        setTimeout(() =&gt; &#123;<br>            form.initialize(&#123;<br>                username: &#x27;Hyouka&#x27;,<br>                password: &#x27;123456&#x27;<br>            &#125;);<br>            onSubmitSuccess();<br>        &#125;, 1000);<br>    &#125;, []);<br>    const onSubmitSuccess = useCallback(() =&gt; &#123;<br>        const &#123;username&#125; = form.getValue();<br>        setLazy(false);<br>        //如果通过表单验证后则触发dispatch<br>        dispatch(&#123;<br>            type: &#x27;loginModule/whetherLogin&#x27;,<br>            payload: &#123;<br>                user: username<br>            &#125;<br>        &#125;);<br>        history.push(&#x27;/&#x27;);<br>    &#125;, [])<br>    return (<br>        &lt;div className=&#x27;user-login-container&#x27;&gt;<br>            &lt;div className=&#x27;user-login-container-form&#x27;&gt;<br>                &lt;header&gt;Hyouka&lt;/header&gt;<br>                &lt;Form<br>                    layout=&#x27;horizontal&#x27;<br>                    form=&#123;form&#125;<br>                    onSubmit=&#123;onSubmit&#125;<br>                    onSubmitSuccess=&#123;onSubmitSuccess&#125;<br>                &gt;<br>                    &lt;FormInputField<br>                        name=&#x27;username&#x27;<br>                        helpDesc=&quot;用户名: Hyouka&quot;<br>                        required=&quot;请填写用户名&quot;<br>                    /&gt;<br>                    &lt;FormInputField<br>                        name=&#x27;password&#x27;<br>                        props=&#123;&#123;<br>                            type: &#x27;password&#x27;<br>                        &#125;&#125;<br>                        helpDesc=&#x27;密码随便填，只能填数字，字母形式&#x27;<br>                        required=&#x27;请填写密码&#x27;<br>                        validators=&#123;[<br>                            Validators.pattern(/^[a-zA-Z0-9]+$/, &#x27;只允许英文字母和数字&#x27;),<br>                        ]&#125;<br>                    /&gt;<br>                    &lt;div className=&#x27;user-login-container-form-action&#x27;&gt;<br>                        &lt;Button loading=&#123;lazy&#125; htmlType=&#x27;submit&#x27;&gt;登陆&lt;/Button&gt;<br>                        &lt;Button onClick=&#123;onSubLaySubmit&#125; loading=&#123;lazy&#125;&gt;懒得填点我&lt;/Button&gt;<br>                    &lt;/div&gt;<br>                &lt;/Form&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;;<br><br>export default connect()(UserLayout);<br></code></pre></td></tr></table></figure><h4 id="BaseLayout"><a href="#BaseLayout" class="headerlink" title="BaseLayout"></a>BaseLayout</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> BaseLayout: React.FC&lt;GlobalDispatchComponentType &amp; LoginState &amp; &#123;<br>    routes: <span class="hljs-built_in">Array</span>&lt;React.ReactNode&gt;<br>&#125;&gt; = <span class="hljs-function">(<span class="hljs-params">&#123;user, routes&#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> history = useHistory();<br>    <span class="hljs-comment">//如果不存在username则返回到登陆页面通过</span><br>    useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(!getLocal(<span class="hljs-string">&#x27;username&#x27;</span>)) &#123;<br>            history.push(<span class="hljs-string">&#x27;/login&#x27;</span>);<br>        &#125;<br>    &#125;, [user]);<br><br>    <span class="hljs-keyword">return</span>(<br>        &lt;div className=<span class="hljs-string">&#x27;layout&#x27;</span>&gt;<br>            &lt;div className=<span class="hljs-string">&#x27;layout-slide&#x27;</span>&gt;<br>                这边就是导航栏<br>            &lt;/div&gt;<br>            &lt;div className=<span class="hljs-string">&#x27;layout-content&#x27;</span>&gt;<br>                &lt;Header/&gt;<br>                &lt;div className=<span class="hljs-string">&#x27;layout-content-body&#x27;</span>&gt;<br>                    &lt;Switch&gt;<br>                        &#123;routes&#125;<br>                    &lt;/Switch&gt;<br>                &lt;/div&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123;loginModule&#125;: ConnectType</span>) =&gt;</span> (&#123;...loginModule&#125;))(BaseLayout);<br></code></pre></td></tr></table></figure><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;Menu, Icon&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;zent&#x27;</span>;<br><br><span class="hljs-keyword">const</span> &#123;MenuItem, SubMenu&#125; = Menu;<br><br><span class="hljs-keyword">const</span> SlideBar = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">location</span>: &#123;pathname&#125;&#125; = history;<br>    <span class="hljs-keyword">const</span> [defaultSelectedKey, setDefaultSelectedKey] = useState&lt;string&gt;(<span class="hljs-string">&#x27;/basis&#x27;</span>);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这里返回的是&#123;name, path, component&#125; component我们不需要</span><br><span class="hljs-comment">     * 这个函数有必要可以在修改一下将promise.default改成&#123;&#125;导出将</span><br><span class="hljs-comment">     * meta信息也一致返回出来当然真实环境肯定是通过api来获取的</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-keyword">const</span> renderMenu = <span class="hljs-function">(<span class="hljs-params">menu = paths</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (!menu) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 这里的sub应该对应最开始设置的路由接口Array&lt;RouterConfig&gt;我这为了方便就随便写了,而且我这里就只有一层</span><br><span class="hljs-comment">         * **/</span><br>        <span class="hljs-keyword">const</span> renderItemOrSub = <span class="hljs-function">(<span class="hljs-params">sub: any</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (sub.children &amp;&amp; sub.children.length) &#123;<br>                <span class="hljs-comment">//SubMenu内还可以添加其他参数</span><br>                <span class="hljs-keyword">return</span> (<br>                    &lt;SubMenu<br>                        title=&#123;sub.name&#125;<br>                    &gt;<br>                        &#123;renderMenu(sub.children)&#125;<br>                    &lt;/SubMenu&gt;<br>                )<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> (<br>                    &lt;MenuItem key=&#123;sub.path&#125;&gt;<br>                        &#123;sub.name&#125;<br>                    &lt;/MenuItem&gt;<br>                )<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> menu.map(<span class="hljs-function">(<span class="hljs-params">item: any</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> renderItemOrSub(item);<br>        &#125;)<br>    &#125;;<br>    <span class="hljs-keyword">const</span> slideMenuClick = <span class="hljs-keyword">async</span> (e: React.MouseEvent, <span class="hljs-attr">key</span>: string) =&gt; &#123;<br>        <span class="hljs-keyword">await</span> setDefaultSelectedKey(pathname);<br>        <span class="hljs-keyword">await</span> history.push(key);<br>    &#125;;<br><br>    <span class="hljs-keyword">return</span> (<br>        &lt;div className=<span class="hljs-string">&#x27;slide-bar&#x27;</span>&gt;<br>            &lt;div className=<span class="hljs-string">&#x27;slide-bar-header&#x27;</span>&gt;<br>                &lt;Icon type=<span class="hljs-string">&#x27;youzan&#x27;</span>/&gt;<br>                &lt;span className=<span class="hljs-string">&#x27;slide-bar-header-title&#x27;</span>&gt;<br>                    Zent<br>                &lt;/span&gt;<br>            &lt;/div&gt;<br>            &lt;div className=<span class="hljs-string">&#x27;slide-bar-menu&#x27;</span>&gt;<br>                &lt;Menu<br>                    mode=<span class="hljs-string">&quot;inline&quot;</span><br>                    defaultSelectedKey=&#123;defaultSelectedKey&#125;<br>                    onClick=&#123;slideMenuClick&#125;<br>                &gt;<br>                    &#123;renderMenu()&#125;<br>                &lt;/Menu&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;;<br></code></pre></td></tr></table></figure><p>写完以上代码后我们最后在BaseLayout里面引入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">return</span>(<br>    &lt;div className=<span class="hljs-string">&#x27;layout&#x27;</span>&gt;<br>        &lt;div className=<span class="hljs-string">&#x27;layout-slide&#x27;</span>&gt;<br>            &lt;SlideBar/&gt;<br>        &lt;/div&gt;<br>        &lt;div className=<span class="hljs-string">&#x27;layout-content&#x27;</span>&gt;<br>            &lt;Header/&gt;<br>            &lt;div className=<span class="hljs-string">&#x27;layout-content-body&#x27;</span>&gt;<br>                &lt;Switch&gt;<br>                    &#123;routes&#125;<br>                &lt;/Switch&gt;<br>            &lt;/div&gt;<br>        &lt;/div&gt;<br>    &lt;/div&gt;<br>)<br></code></pre></td></tr></table></figure><p>接着我们就可以愉快的编写我们的页面了</p><h2 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h2><p>如果让我单纯的拿antd文档和zent文档来做比较的话，我认为antd文档是比较清晰的，每一个方法以及属性都一一列举在了<br>每一个组件文档的最后，并且告知了callback返回的参数值，像zent的话虽然有一个全部方法的文档，但全部是英文的(英语差，最近在补英语),<br>而且整个方法的列举看起来比较凌乱。。。。所以我还是想有赞的大佬们能改进一下的。🐶保命。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><img src= "/img/loading.gif" data-lazy-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a09efd5a6cff49f6bf5526f05947307c~tplv-k3u1fbpfcp-watermark.image"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React路由问题</title>
      <link href="routingAutomation/react%E8%B7%AF%E7%94%B1%E9%97%AE%E9%A2%98/"/>
      <url>routingAutomation/react%E8%B7%AF%E7%94%B1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这个问题我很早之前就已经想过了，只是最近看到<a href="https://github.com/alexwjj/react-ts">俊劫</a> 他写了一个react+ts的后台练手项目，看到他的路由的时候不由得又想说一下</p></blockquote><p>这是他写的路由信息表，我反正看着是头痛。。。<br><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/HyoukaM/HyoukaM.github.io/docs/docs/.vuepress/public/react-router.png" alt="react-router"></p><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><p>写过vue的应该知道vue有一套完整内置路由体系，并且使用脚手架搭建项目的时候会让你选择安装是否，安装完成后所对应的代码如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../views/Home.vue&#x27;</span><br><br>Vue.use(VueRouter)<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;Home&#x27;</span>,<br>    component: Home<br>  &#125;,<br>  &#123;<br>    path: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;About&#x27;</span>,<br>    <span class="hljs-comment">// route level code-splitting</span><br>    <span class="hljs-comment">// this generates a separate chunk (about.[hash].js) for this route</span><br>    <span class="hljs-comment">// which is lazy-loaded when the route is visited.</span><br>    component: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="hljs-string">&#x27;../views/About.vue&#x27;</span>)<br>  &#125;<br>]<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  mode: <span class="hljs-string">&#x27;history&#x27;</span>,<br>  base: process.env.BASE_URL,<br>  routes<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>并且还很贴心的内置了懒加载路由() =&gt; import(routerPath);<br>贴心小棉袄就完事了👀,我们只需要找到对应的组件然后将它导入，定义路径即可实现路由的跳转</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>而在react当中如果要实现路由的话则会出现<a href="https://github.com/alexwjj/react-ts">俊劫</a> 的情况，因为他没办法像vue一样传入一个数组对象来帮我们进行内部处理，<br>那我们为什么不能像vue处理路由数组对象一样来处理react路由呐，这样子管理起来也比较方便(个人观点🤫)。<br>首先我们来看一下在react当中路由的相关组件<br><a href="https://reactrouter.com/web/guides/quick-start">相关链接</a></p><h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a><a href="https://reactrouter.com/web/api/Router">Router</a></h3><p>所有路由器组件的通用低级接口。通常，应用程序会使用一种高级路由器来代替:</p><ul><li><a href="https://reactrouter.com/web/api/BrowserRouter">BrowserRouter</a></li><li><a href="https://reactrouter.com/web/api/HashRouter">HashRouter</a></li><li><a href="https://reactrouter.com/web/api/MemoryRouter">MemoryRouter</a></li><li><a href="https://reactrouter.com/web/api/NativeRouter">NativeRouter</a></li><li><a href="https://reactrouter.com/web/api/StaticRouter">StaticRouter</a></li></ul><p>他有两个参数一个是history，一个是children，history是必传的，用于导航的对象，可以通过内置的history来创建<br>同时他有三个方法</p><ol><li>createBrowserHistory</li><li>createHashHistory</li><li>createMemoryHistory</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;Router&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;createHashHistory&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;history&quot;</span>;<br><span class="hljs-keyword">const</span> history = createHashHistory();<br>ReactDOM.render(<br>    &lt;Router history=&#123;history&#125;&gt;<br>        &lt;App/&gt;<br>    &lt;/Router&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>以上三种方法和vue-router当中的mode相似具体可以去参考<a href="http://react-guide.github.io/react-router-cn/docs/guides/basics/Histories.html">文档</a></p><h3 id="Route"><a href="#Route" class="headerlink" title="Route"></a><a href="https://reactrouter.com/web/api/Route">Route</a></h3><p>Route组件是React路由器中最重要的组件，需要理解和学习使用。它最基本的职责是在路径与当前URL匹配时渲染指定的UI组件。</p><p>Route渲染方法有三种方式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>&lt;Route component/&gt;<br><span class="hljs-number">2.</span>&lt;Route render/&gt;<br><span class="hljs-number">3.</span>&lt;Route children/&gt;<span class="hljs-function"><span class="hljs-keyword">function</span></span><br></code></pre></td></tr></table></figure><p>并且以上三种方法都会传递 match， location ，history 三个参数<br>我们分别来看一下以上三种渲染方式</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;Router, Route&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;createHashHistory&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;history&quot;</span>;<br><span class="hljs-keyword">const</span> history = createHashHistory();<br><span class="hljs-keyword">const</span> RouteComponent = <span class="hljs-function">(<span class="hljs-params">&#123;history, location, match&#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span>(<br>        &lt;div&gt;<br>            <span class="hljs-number">123</span><br>        &lt;/div&gt;<br>    )<br>&#125;<br>ReactDOM.render(<br>    &lt;Router history=&#123;history&#125;&gt;<br>        &lt;Route path=<span class="hljs-string">&#x27;/&#x27;</span>  component=&#123;RouteComponent&#125;/&gt;<br>        &lt;App/&gt;<br>    &lt;/Router&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;Router, Route&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;createHashHistory&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;history&quot;</span>;<br><span class="hljs-keyword">const</span> history = createHashHistory();<br>ReactDOM.render(<br>    &lt;Router history=&#123;history&#125;&gt;<br>        &lt;Route path=<span class="hljs-string">&#x27;/&#x27;</span> render=&#123;<span class="hljs-function">(<span class="hljs-params">&#123;match, location, history&#125;</span>) =&gt;</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(match, location, history);<br>            <span class="hljs-keyword">return</span>(<br>                &lt;div&gt;<br>                    <span class="hljs-number">123</span><br>                &lt;/div&gt;<br>            )<br>        &#125;&#125;/&gt;<br>        &lt;App/&gt;<br>    &lt;/Router&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;Router, Route&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;createHashHistory&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;history&quot;</span>;<br><span class="hljs-keyword">const</span> history = createHashHistory();<br>ReactDOM.render(<br>    &lt;Router history=&#123;history&#125;&gt;<br>        &lt;Route path=<span class="hljs-string">&#x27;/&#x27;</span> children=&#123;<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span>(<br>                &lt;div&gt;<br>                    <span class="hljs-number">321</span><br>                &lt;/div&gt;<br>            )<br>        &#125;&#125;/&gt;<br>    &lt;/Router&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a><a href="https://reactrouter.com/web/api/Switch">Switch</a></h3><p>渲染成功匹配path的第一个子元素Route或Redirect。</p><p>例子</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;Router, Route, Switch&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;createHashHistory&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;history&quot;</span>;<br><span class="hljs-keyword">const</span> history = createHashHistory();<br><span class="hljs-keyword">const</span> View = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span>(<br>        &lt;div&gt;<br>            这是页面<span class="hljs-number">2</span><br>        &lt;/div&gt;<br>    )<br>&#125;;<br><span class="hljs-keyword">const</span> App = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span>(<br>        &lt;div&gt;<br>            这是页面<span class="hljs-number">1</span><br>        &lt;/div&gt;<br>    )<br>&#125;;<br>ReactDOM.render(<br>    &lt;Router history=&#123;history&#125;&gt;<br>        &lt;Switch&gt;<br>            &lt;Route exact path=<span class="hljs-string">&#x27;/&#x27;</span> component=&#123;App&#125;/&gt;<br>            &lt;Route path=<span class="hljs-string">&#x27;/option&#x27;</span> component=&#123;View&#125;/&gt;<br>        &lt;/Switch&gt;<br>    &lt;/Router&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>所以我们可以借鉴vue-router的<a href="https://router.vuejs.org/zh/api/#router-%E6%9E%84%E5%BB%BA%E9%80%89%E9%A1%B9">构建选项</a></p><p>完成以下代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> createRoute = <span class="hljs-function">(<span class="hljs-params">route</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">component</span>: Com, path, name, redirect, ...arg&#125; = route;<br>    <span class="hljs-comment">//如果有子集的话遍历子集将子集的每个组件转换为Route组件</span><br>    <span class="hljs-keyword">if</span> (redirect &amp;&amp; arg.children &amp;&amp; <span class="hljs-built_in">Object</span>.prototype.toString.call(arg.children) === <span class="hljs-string">&#x27;[object Array]&#x27;</span> &amp;&amp; arg.children.length) &#123;<br>        arg.children = arg.children.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> createRoute(item));<br>        <span class="hljs-comment">//这边可能存在重定向问题因为最外面一层的路由路径指向的不是自己本身</span><br>        arg.children.unshift(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;redirect&#125;</span> <span class="hljs-attr">from</span>=<span class="hljs-string">&#123;path&#125;</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span>`$&#123;<span class="hljs-attr">path</span>&#125;<span class="hljs-attr">_redirect</span>`&#125; <span class="hljs-attr">exact</span>/&gt;</span></span>)<br>    &#125;<br>    <span class="hljs-comment">//通过Route的render渲染将Component渲染上去</span><br>    <span class="hljs-keyword">const</span> router = &#123;<br>        key: path || <span class="hljs-built_in">Math</span>.random(),<br>        render: <span class="hljs-function">(<span class="hljs-params">&#123;...props&#125;</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">//这边我想实现() =&gt; import(&#x27;&#x27;)这样的方式但是好像不行🐶🐶。。</span><br>            <span class="hljs-comment">// if(Object.prototype.toString.call(Com()) === &#x27;[object Promise]&#x27;)&#123;</span><br>            <span class="hljs-comment">//     Com().then(res =&gt; &#123;</span><br>            <span class="hljs-comment">//         let Component = res.default;</span><br>            <span class="hljs-comment">//         console.log(res.default);</span><br>            <span class="hljs-comment">//         return &lt;Component renderChildren=&#123;arg&#125; &#123;...props&#125;/&gt;</span><br>            <span class="hljs-comment">//     &#125;);</span><br>            <span class="hljs-comment">// &#125;else &#123;</span><br>            <span class="hljs-comment">//     return (&lt;Com renderChildren=&#123;arg&#125; &#123;...props&#125; /&gt;)</span><br>            <span class="hljs-comment">// &#125;</span><br>            <span class="hljs-comment">//这里因为React里面都是通过props传递数据的，如果包含children的路由就可以 const &#123;renderChildren: &#123;children&#125;&#125; = props</span><br>            <span class="hljs-comment">//&lt;Switch&gt;&#123;children&#125;&lt;/Switch&gt;就好了</span><br>            <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Com</span> <span class="hljs-attr">renderChildren</span>=<span class="hljs-string">&#123;arg&#125;</span> &#123;<span class="hljs-attr">...props</span>&#125; /&gt;</span></span>)<br>        &#125;<br>    &#125;;<br>    <span class="hljs-comment">//然后通过Route组件返回出去</span><br>    <span class="hljs-keyword">return</span>(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">exact</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#123;path&#125;</span> &#123;<span class="hljs-attr">...router</span>&#125;/&gt;</span></span>)<br>&#125;;<br><br><span class="hljs-keyword">const</span> createRouter = <span class="hljs-function">(<span class="hljs-params">routes</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> routers = routes.map(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> createRoute(route));<br>    <span class="hljs-keyword">return</span>(<br>        &lt;Switch&gt;<br>            &#123;routers&#125;<br>        &lt;/Switch&gt;<br>    )<br>&#125;;<br><br><span class="hljs-keyword">const</span> routes = [<br>    &#123;<br>        path: <span class="hljs-string">&#x27;/&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;App&#x27;</span>,<br>        component: App<br>    &#125;,<br>    &#123;<br>        path: <span class="hljs-string">&#x27;/view&#x27;</span>,<br>        name: <span class="hljs-string">&#x27;View1&#x27;</span>,<br>        component: Option1<br>    &#125;<br>];<br><br><span class="hljs-keyword">const</span> history = createHashHistory();<br><br>ReactDOM.render(<br>    &lt;HashRouter&gt;<br>        &lt;Router history=&#123;history&#125;&gt;<br>            &#123;createRouter(routes)&#125;<br>        &lt;/Router&gt;<br>    &lt;/HashRouter&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>那这样子我们是不是只需要像vue一样管理routes这个路由对象就可以了🤔🤔🤔</p><blockquote><p>当然这只是我个人的想法，而且通过像vue一样的() =&gt; import() 导入的方式没有实现🙄, 各位大佬有啥好的建议也可以指点小弟一下👀</p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><img src= "/img/loading.gif" data-lazy-src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a09efd5a6cff49f6bf5526f05947307c~tplv-k3u1fbpfcp-watermark.image"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 39. 数组中出现次数超过一半的数字</title>
      <link href="majorityElement/%E5%89%91%E6%8C%87-offer-39-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>majorityElement/%E5%89%91%E6%8C%87-offer-39-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p>示例 1:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>]<br>输出: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>这道题从我看题目开始其实我的第一想法就是将数组先进行排序然后取出中间值就可以得出这个数字</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//取数组下标不能输出小数，所以我们需要取整数部分</span><br> <span class="hljs-keyword">const</span> mid = <span class="hljs-built_in">parseInt</span>(nums.length / <span class="hljs-number">2</span>);<br><span class="hljs-comment">//冒泡排序</span><br> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length - <span class="hljs-number">1</span>; i++) &#123;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; nums.length - i - <span class="hljs-number">1</span>; j++) &#123;<br>     <span class="hljs-keyword">if</span> (nums[j] &gt; nums[j + <span class="hljs-number">1</span>]) &#123;<br>       <span class="hljs-keyword">let</span> num = nums[j];<br>       nums[j] = nums[j + <span class="hljs-number">1</span>];<br>       nums[j + <span class="hljs-number">1</span>] = num;<br>     &#125;<br>   &#125;<br> &#125;<br> <span class="hljs-comment">//返回中间值，由于有一个数是出现了一半所以 n = nums.length - 1 / 2 - 1 &lt; n &lt; n = nums.length - 1 / 2 + 1</span><br> <span class="hljs-comment">//n肯定是我们想要的结果</span><br> <span class="hljs-keyword">return</span> nums[mid];<br></code></pre></td></tr></table></figure><p>但是上面的方法非常的消耗内存时间所以我们可以换一种思路来思考🤔<br>已知n出现的次数是 &gt;= nums.length / 2的所以我们可以初始值一个count来计每个值出现的次数，<br>cur来得到我们想要的值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> majorityElement = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) </span>&#123;<br>    <span class="hljs-comment">//我们想要得到的值</span><br>    <span class="hljs-keyword">let</span> cur = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//计数器</span><br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> num <span class="hljs-keyword">of</span> nums)&#123;<br>        <span class="hljs-comment">//[1, 2, 3, 2, 2, 2, 5, 4, 2]</span><br>        <span class="hljs-comment">//count为0的时候代表出现的值出现次数已经被后者多次数的数值被覆盖</span><br>        <span class="hljs-keyword">if</span>(count === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//cur = 1;</span><br>            <span class="hljs-comment">//不走</span><br>            <span class="hljs-comment">//cur = 3</span><br>            cur = num;<br>        &#125;<br>        <span class="hljs-comment">// 1 = 1;</span><br>        <span class="hljs-comment">// 3 = 3</span><br>        <span class="hljs-keyword">if</span>(num === cur) &#123;<br>            <span class="hljs-comment">//1</span><br>            count++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 1 - 1 = 0</span><br>            count--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cur;<br>&#125;;<br></code></pre></td></tr></table></figure><p>最后就能得出最终结果</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 29. 顺时针打印矩阵</title>
      <link href="spiralOrder/%E5%89%91%E6%8C%87-offer-29-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/"/>
      <url>spiralOrder/%E5%89%91%E6%8C%87-offer-29-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入：matrix = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入：matrix = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>],[<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>]]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">10</span>,<span class="hljs-number">9</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br></code></pre></td></tr></table></figure><p>说实话第一眼看到这道题目的时候确实没啥思路于是我就画了一个草稿</p><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">[<br>                                 top = <span class="hljs-number">0</span>; right ++;<br>left=<span class="hljs-number">0</span>;                          [<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>],<br>bottom=<span class="hljs-number">2</span>,排除bottom2,bottom--;    [<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>],    right = <span class="hljs-number">2</span>, 排除top0 top自加<span class="hljs-number">1</span> top++;<br>                                 [<span class="hljs-number">2</span>][<span class="hljs-number">0</span>],[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>],<br>                           right = <span class="hljs-number">2</span>; 排除right2; right自减<span class="hljs-number">1</span> right--;<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>]<br></code></pre></td></tr></table></figure><p>这样子看过以后其实思路就比较清晰了</p><p>思路，首先我们从题可以得出它是一个从左上角-右上角-右下角-左下角-往里循环直至最后一个时停止<br>所以</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>首先确定好上下左右的初始值由左上-左下分别为top=<span class="hljs-number">0</span>;right=array[<span class="hljs-number">0</span>].length-<span class="hljs-number">1</span>;bottom=array.length-<span class="hljs-number">1</span>;left=<span class="hljs-number">0</span>;<br><span class="hljs-number">2.</span>先进行从左往右的递增取到<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>也就是从左上<span class="hljs-number">0</span>，<span class="hljs-number">0</span>开始到右上<span class="hljs-number">0</span>，<span class="hljs-number">2</span>，对应top=<span class="hljs-number">0</span>；left++；<br><span class="hljs-number">3.</span>从右上角开始往右下角递增取<span class="hljs-number">3</span>，<span class="hljs-number">6</span>，<span class="hljs-number">9</span>，由于<span class="hljs-number">3</span>重复所以我们需要将<span class="hljs-number">3</span>给排除掉让top先自增<span class="hljs-number">1</span>，然后进行top++；<br><span class="hljs-number">4.</span>从右下角开始往左下角递减取<span class="hljs-number">9</span>，<span class="hljs-number">8</span>，<span class="hljs-number">7</span>，同上排除<span class="hljs-number">9</span>先让right自减<span class="hljs-number">1</span>；然后进行right--；<br><span class="hljs-number">5.</span>从左下角开始往左上角递减取<span class="hljs-number">7</span>，<span class="hljs-number">4</span>，<span class="hljs-number">1</span>，这里有点不同，在碰到<span class="hljs-number">1</span>时我们需要让他拐个弯，也就是我们需要让他从top=<span class="hljs-number">1</span>重复以上操作<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> spiralOrder = <span class="hljs-function">(<span class="hljs-params">matrix</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    [</span><br><span class="hljs-comment">                                     top = 0; right ++;</span><br><span class="hljs-comment">    left=0;                          [0][0],[0][1],[0][2],</span><br><span class="hljs-comment">    bottom=2,排除bottom2,bottom--;   [1][0],[1][1],[1][2],    right = 2, 排除top0 top自加1 top++;</span><br><span class="hljs-comment">                                    [2][0],[2][1],[2][2],</span><br><span class="hljs-comment">                               right = 2; 排除right2; right自减1 right--;</span><br><span class="hljs-comment">    [1, 2, 3],</span><br><span class="hljs-comment">    [4, 5, 6],</span><br><span class="hljs-comment">    [7, 8, 9],</span><br><span class="hljs-comment">    ]</span><br><span class="hljs-comment">  * */</span><br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>,<span class="hljs-comment">//从左到右</span><br>      top = <span class="hljs-number">0</span>, <span class="hljs-comment">//从上到下</span><br>      right = matrix[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>,<span class="hljs-comment">//从右到左</span><br>      bottom = matrix.length - <span class="hljs-number">1</span>,<span class="hljs-comment">//从下到上</span><br>      x = <span class="hljs-number">0</span>; <span class="hljs-comment">//螺旋下标</span><br>  <span class="hljs-keyword">const</span> res = [];<br>  <span class="hljs-comment">//定义一个死循环，当我们围绕完最后一个值的时候跳出死循环</span><br>  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-comment">//对应第二步</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = left; i &lt;= right; i++) &#123;<br>      res[x++] = matrix[top][i];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (++top &gt; bottom) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">//对应第三步</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = top; i &lt;= bottom; i++) &#123;<br>      res[x++] = matrix[i][right];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (--right &lt; left) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">//对应第四步</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = right; i &gt;= left; i--) &#123;<br>      res[x++] = matrix[bottom][i];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (--bottom &lt; top) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">//对应第五步</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = bottom; i &gt;= top; i--) &#123;<br>      res[x++] = matrix[i][left];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(right &lt; ++left) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    由测试用例可以得到当第一次循环到这结束时，top+1，right-1，bottom-1，left+1后</span><br><span class="hljs-comment">    四者的值分别为1，1，1，1，当我们进行第二次循环体的时候</span><br><span class="hljs-comment">    首先会走1&lt;=1这一步取到1，1的值也就是最后的值，</span><br><span class="hljs-comment">    然后进行if判断2&gt;1 = true;break;跳出死循环</span><br><span class="hljs-comment">    * */</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br>spiralOrder([<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>],<br>    [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>],<br>    [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>],<br>]);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</title>
      <link href="exchange/%E5%89%91%E6%8C%87-offer-21-%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/"/>
      <url>exchange/%E5%89%91%E6%8C%87-offer-21-%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>二分查找</p></blockquote><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入：nums = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>] <br>注：[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>] 也是正确的答案之一。<br></code></pre></td></tr></table></figure><p>提示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">0.</span>&lt;= nums.length &lt;= <span class="hljs-number">50000</span><br><span class="hljs-number">1.</span>&lt;= nums[i] &lt;= <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure><p>解题思路一:</p><p>对数组里面每一个值进行奇偶判断，将奇偶数进行分割，然后重新拼接</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> exchange = <span class="hljs-function">(<span class="hljs-params">nums</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> a = [];<br>    <span class="hljs-keyword">const</span> b = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(nums[i] % <span class="hljs-number">2</span> !== <span class="hljs-number">0</span>) &#123;<br>            a.push(nums[i]);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            b.push(nums[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a.concat(b);<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路二：<br>投机取巧法，使用数组方法直接进行排序</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> exchange = <span class="hljs-function">(<span class="hljs-params">nums</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> nums.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b % <span class="hljs-number">2</span> - a % <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>解题思路三：<br>利用双指针进行比较，定义前指针为偶数，后指针为奇数，定位到两者数值进行替换</p><p>过程:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>初始化start = <span class="hljs-number">0</span>，end = nums.length - <span class="hljs-number">1</span>;<br><span class="hljs-number">2.</span>如果start &lt; end，则代表还处于最大边界之中，继续进行比较；<br><span class="hljs-number">3.</span>如果nums[start] % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>（奇数）,则start ++；直到找不到奇数下标;<br><span class="hljs-number">4.</span>如果nums[end] % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>(偶数)，则end--; 直到找不到偶数下标；<br><span class="hljs-number">5.</span>交换nums[start]和nums[end]的位置<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> exchange = <span class="hljs-function">(<span class="hljs-params">nums</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//1，2，3，4</span><br>  <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> end = nums.length - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start; i &lt; end; i++) &#123;<br>    <span class="hljs-comment">//1</span><br>    <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; (nums[start] % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>)) &#123;<br>      <span class="hljs-comment">//2</span><br>      start++;<br>    &#125;<br>    <span class="hljs-comment">//4</span><br>    <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; (nums[end] % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>)) &#123;<br>      <span class="hljs-comment">//3</span><br>      end--;<br>    &#125;<br>    <span class="hljs-comment">//将2，3替换位置</span><br>    <span class="hljs-keyword">let</span> startNumber = nums[start];<br>    nums[start] = nums[end];<br>    nums[end] = startNumber;<br>  &#125;<br>  <span class="hljs-keyword">return</span> nums;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继🔥Vue 转 React不完全指北(俊劫)</title>
      <link href="theDifferenceBetweenVueAndReact/%E7%BB%A7%F0%9F%94%A5vue-%E8%BD%AC-react%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97-%E4%BF%8A%E5%8A%AB/"/>
      <url>theDifferenceBetweenVueAndReact/%E7%BB%A7%F0%9F%94%A5vue-%E8%BD%AC-react%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8C%97-%E4%BF%8A%E5%8A%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>和我面基(还没)的俊劫发表了一篇这样的文章，地址：<a href="https://juejin.cn/post/6953482028188860424">掘金</a><br>虽然我的个人经验没有俊劫多，但其不然我也提提我对于两者之间的看法<a href="https://juejin.cn/post/6953870701363200031">掘金</a></p></blockquote><h2 id="一、vue和react"><a href="#一、vue和react" class="headerlink" title="一、vue和react"></a>一、vue和react</h2><p>作为目前前端最流行的两大框架，两者之间肯定是存在差异性的，不然两者双剑合璧得了(其实我也挺想的，毕竟现在要学的东西太多了)， 而差异性无非就体现在两个框架对于自己是怎么定义的。</p><h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><p><a href="https://cn.vuejs.org/">vue</a> 其官网豁然开亮的几行大字，渐进式框架，灵活，易用，高效，所以在vue当中开发者只需要关注你的试图即可，通过getter，setter，不用去<br>特意的去优化就能够达到很好的效果，并且有一套官方维护的生态系统。</p><h3 id="react"><a href="#react" class="headerlink" title="react"></a>react</h3><p><a href="https://react.docschina.org/">react</a> 作为Facebook的亲儿子一样，虽然这个亲儿子是由社区维护，且其生态也是社区维护，但也很难取代他的地位。<br>在 <a href="https://react.docschina.org/">react</a> 当中其实可以把任何的东西都看作是组件，整个页面都是由一个个组件拼接而成。</p><p>像俊劫说的vue只适合开发小中型项目，而大型项目的话只能用react来开发，其实并不然。其实就一个项目选择开发框架而言来说，<br>这个项目后期的维护性难度大不大，以及这个项目的可迭代问题完全取决于开发这个项目的人愿不愿意去好好写了🐶保命，虽然react在代码颗粒度上确实要比<br>vue来的要好，但是两者框架内部的原理其实都是大同小异的。所以说我认为并没有什么vue只能开发小中型项目，而react适合开发大型项目之类的。毕竟存在即合理🐶🐶🐶。</p><h2 id="二、核心概念"><a href="#二、核心概念" class="headerlink" title="二、核心概念"></a>二、核心概念</h2><p>核心概念就不讲了可以去看<a href="https://juejin.cn/post/6953482028188860424">俊劫</a> 的掘金</p><h2 id="三、组件定义"><a href="#三、组件定义" class="headerlink" title="三、组件定义"></a>三、组件定义</h2><h3 id="1、vue"><a href="#1、vue" class="headerlink" title="1、vue"></a>1、vue</h3><pre><code>个人写vue通常使用的是jsx,所以写起来两者区别并不是很大</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//jsx </span><br><span class="hljs-comment">// 父组件</span><br><span class="hljs-keyword">const</span> SonComponent = &#123;<br>    name: <span class="hljs-string">&#x27;SomComponent&#x27;</span>,<br>    inject: [<span class="hljs-string">&#x27;fatherDescription&#x27;</span>],<br>    props: &#123;<br>        fatherProp: &#123;<br>            type: <span class="hljs-built_in">String</span>,<br>            <span class="hljs-keyword">default</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            description: <span class="hljs-string">&#x27;i am son&#x27;</span><br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">buttonClick</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">const</span> &#123;description&#125; = <span class="hljs-built_in">this</span>;<br>            <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;sonClick&#x27;</span>, description)<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;description, buttonClick&#125; = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">const</span> &#123;fatherProp&#125; = <span class="hljs-built_in">this</span>.$props;<br>        <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">default</span>: slots&#125; = <span class="hljs-built_in">this</span>.$slots;<br>        <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">default</span>: defaultSlot, mySlotName&#125; = <span class="hljs-built_in">this</span>.$scopedSlots;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.fatherDescription);<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &#123;description&#125;<br>                &#123;slots&#125;<br>                &#123;defaultSlot()&#125;<br>                &#123;mySlotName()&#125;<br>                &#123;fatherProp&#125;<br>                &lt;button onClick=&#123;buttonClick&#125;&gt;子组件传递信息至父组件&lt;/button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">const</span> ParentComponent = &#123;<br>    name: <span class="hljs-string">&#x27;ParentComponent&#x27;</span>,<br>    components: &#123;<br>        SonComponent,<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            description: <span class="hljs-string">&#x27;i am father&#x27;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment">//多层级组件嵌套可以用provide/inject获取到祖父级别的信息</span><br>    <span class="hljs-function"><span class="hljs-title">provide</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            fatherDescription: <span class="hljs-built_in">this</span>.description<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;description&#125; = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &#123;description&#125;<br>                &lt;son-component<br>                    <span class="hljs-comment">// 默认插槽和具名插槽</span><br>                    scopedSlots=&#123;&#123;<br>                        <span class="hljs-keyword">default</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                            <span class="hljs-keyword">return</span> (<br>                                &lt;div&gt;<br>                                    这也是默认插槽<br>                                &lt;/div&gt;<br>                            )<br>                        &#125;,<br>                        mySlotName: <span class="hljs-function">() =&gt;</span> &#123;<br>                            <span class="hljs-keyword">return</span> (<br>                                &lt;div&gt;<br>                                    这是具名插槽<br>                                &lt;/div&gt;<br>                            )<br>                        &#125;<br>                    &#125;&#125;<br>                    fatherProp=&#123;description&#125;<br>                    onsonClick=&#123;<span class="hljs-function">(<span class="hljs-params">description</span>) =&gt;</span> &#123;<br>                        <span class="hljs-built_in">console</span>.log(description);<br>                    &#125;&#125;<br>                &gt;<br>                    &#123;<span class="hljs-comment">/*  默认插槽  */</span>&#125;<br>                    &lt;div&gt;<br>                        这是插槽<br>                    &lt;/div&gt;<br>                &lt;/son-component&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//函数式组件</span><br><br><span class="hljs-keyword">const</span> SonComponent_1 = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span>(<br>        &lt;div&gt;<br>            函数式组件<br>        &lt;/div&gt;<br>    )<br>&#125;<br><br><span class="hljs-comment">//template</span><br><span class="hljs-comment">// 父组件</span><br>&lt;template&gt;<br>    &lt;div&gt;<br>        &#123;&#123;description&#125;&#125;<br>        &lt;son :fatherDescription=<span class="hljs-string">&quot;description&quot;</span> @sonClick=<span class="hljs-string">&quot;sonClick&quot;</span>&gt;<br>        &lt;div&gt;<br>            我是默认插槽<br>        &lt;/div&gt;<br>        &lt;div slot=<span class="hljs-string">&quot;mySlot&quot;</span>&gt;<br>            我是具名插槽<br>        &lt;/div&gt;<br>    &lt;/son&gt;<br>&lt;/div&gt;<br>&lt;/template&gt;<br><br><span class="hljs-keyword">import</span> Son <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;Son.vue&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    name: <span class="hljs-string">&quot;Father&quot;</span>,<br>    components: &#123;<br>        <span class="hljs-comment">//子组件</span><br>        Son,<br>        <span class="hljs-comment">//或</span><br>        SonComponent: &#123;<br>            name: <span class="hljs-string">&#x27;SonComponent&#x27;</span>,<br>            <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    description: <span class="hljs-string">&#x27;i am son&#x27;</span>,<br>                &#125;<br>            &#125;,<br>            <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>                <span class="hljs-keyword">const</span> &#123;description&#125; = <span class="hljs-built_in">this</span>;<br>                <span class="hljs-keyword">return</span> (<br>                    &lt;div&gt;<br>                        &#123;description&#125;<br>                    &lt;/div&gt;<br>                )<br>            &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            description: <span class="hljs-string">&#x27;i am father&#x27;</span>,<br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">sonClick</span>(<span class="hljs-params">description</span>)</span> &#123;<br>            <span class="hljs-built_in">console</span>.log(description);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Son</span><br>&lt;template&gt;<br>    &lt;div&gt;<br>        &#123;&#123;description&#125;&#125;<br>        &lt;button @click=<span class="hljs-string">&quot;buttonClick&quot;</span>&gt;子组件传递至父组件&lt;/button&gt;<br>        &#123;&#123;fatherDescription&#125;&#125;<br>        &lt;slot/&gt;<br>        &lt;slot name=<span class="hljs-string">&quot;mySlot&quot;</span>/&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    name: <span class="hljs-string">&quot;Son&quot;</span>,<br>    props: &#123;<br>        fatherDescription: &#123;<br>            type: <span class="hljs-built_in">String</span>,<br>            <span class="hljs-keyword">default</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            description: <span class="hljs-string">&#x27;i am son&#x27;</span><br>        &#125;<br>    &#125;,<br>    methods: &#123;<br>        <span class="hljs-function"><span class="hljs-title">buttonClick</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-keyword">const</span> &#123;description&#125; = <span class="hljs-built_in">this</span>;<br>            <span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;sonClick&#x27;</span>, description);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>vue函数式组件具体可以参考<a href="https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6">函数式组件</a></p><h3 id="2、react"><a href="#2、react" class="headerlink" title="2、react"></a>2、react</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// calss</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;Button&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SonComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>(props);<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            description: <span class="hljs-string">&#x27;i am son&#x27;</span><br>        &#125;;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">clickButton</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;点击事件&#x27;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;description&#125; = <span class="hljs-built_in">this</span>.state;<br>        <span class="hljs-keyword">const</span> &#123;fatherClick&#125; = <span class="hljs-built_in">this</span>.props;<br>        <span class="hljs-keyword">const</span> &#123;clickButton&#125; = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">return</span> (<br>            &lt;div&gt;<br>                &#123;description&#125;<br>                &lt;Button onClick=&#123;clickButton&#125;&gt;点击我&lt;/Button&gt;<br>                &lt;Button onClick=&#123;<span class="hljs-function">() =&gt;</span> fatherClick(<span class="hljs-string">&#x27;点击事件&#x27;</span>)&#125;&gt;点击我&lt;/Button&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FatherComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            description: <span class="hljs-string">&#x27;i am Father&#x27;</span><br>        &#125;;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">fatherClick</span>(<span class="hljs-params">string</span>)</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(string);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">const</span> &#123;description&#125; = <span class="hljs-built_in">this</span>.state;<br>        <span class="hljs-keyword">const</span> &#123;fatherClick&#125; = <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">return</span>(<br>            &lt;div&gt;<br>                &#123;description&#125;<br>                &lt;SonComponent fatherClick=&#123;fatherClick&#125;/&gt;<br>            &lt;/div&gt;<br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//FunctionComponent</span><br><span class="hljs-keyword">import</span> React, &#123;useState, createContext, useContext&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;Button&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;antd&#x27;</span>;<br><br><span class="hljs-keyword">const</span> ParentContext: React.Context&lt;&#123;<br>    fatherClick?: <span class="hljs-function">(<span class="hljs-params">dispath: React.Dispatch&lt;React.SetStateAction&lt;string&gt;&gt;</span>) =&gt;</span> <span class="hljs-keyword">void</span>;<br>&#125;&gt; = createContext(&#123;&#125;)<br><br><span class="hljs-comment">//React.FunctionComponent&lt;props类型&gt; = React.FC;</span><br><span class="hljs-keyword">const</span> SonComponent: React.FunctionComponent&lt;&#123;<br>    <span class="hljs-comment">//子组件接受父组件参数</span><br>    fatherClick: <span class="hljs-function">(<span class="hljs-params">diapatch: React.Dispatch&lt;React.SetStateAction&lt;string&gt;&gt;</span>) =&gt;</span> <span class="hljs-keyword">void</span>;<br>    children: React.ReactNode<br>&#125;&gt; = (&#123;<br>          <span class="hljs-comment">// fatherClick</span><br>          children<br>      &#125;) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> [description, changeDescription] = useState&lt;string&gt;(<span class="hljs-string">&#x27;i am son&#x27;</span>);<br>    <span class="hljs-keyword">const</span> &#123;fatherClick&#125; = useContext(ParentContext);<br>    <span class="hljs-keyword">const</span> clickButton = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//通过props进行父子级通讯</span><br>        <span class="hljs-comment">// fatherClick(changeDescription);</span><br>        <span class="hljs-comment">//通过context进行父子级通讯</span><br>        fatherClick&amp;&amp;fatherClick(changeDescription);<br>        <span class="hljs-comment">// changeDescription(&#x27;点击事件&#x27;);</span><br>    &#125;;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;ParentContext.Consumer&gt;<br>                &#123;<br>                    (&#123;<br>                         fatherClick<br>                     &#125;) =&gt; (<br>                        &lt;&gt;<br>                            &#123;description&#125;<br>                            &lt;Button onClick=&#123;<span class="hljs-function">() =&gt;</span> fatherClick&amp;&amp;fatherClick(changeDescription)&#125;&gt;点击事件&lt;/Button&gt;<br>                            &lt;Button onClick=&#123;clickButton&#125;&gt;点击事件&lt;/Button&gt;<br>                            &#123;children&#125;<br>                        &lt;/&gt;<br>                    )<br>                &#125;<br>            &lt;/ParentContext.Consumer&gt;<br><br>        &lt;/div&gt;<br>    )<br>&#125;;<br><br><span class="hljs-keyword">const</span> FatherComponent: React.FC&lt;&#123;&#125;&gt; = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> [description] = useState&lt;string&gt;(<span class="hljs-string">&#x27;i am father&#x27;</span>);<br>    <span class="hljs-keyword">const</span> fatherClick = <span class="hljs-function">(<span class="hljs-params">dispatch: React.Dispatch&lt;React.SetStateAction&lt;string&gt;&gt;</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//改变子组件里面的description</span><br>        dispatch(<span class="hljs-string">&#x27;点击事件&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>            &lt;ParentContext.Provider<br>                value=&#123;<br>                    &#123;<br>                        fatherClick<br>                    &#125;<br>                &#125;<br><br>            &gt;<br>                &#123;description&#125;<br>                &lt;SonComponent fatherClick=&#123;fatherClick&#125;&gt;<br>                    &lt;div&gt;<br>                        我是插槽<br>                    &lt;/div&gt;<br>                &lt;/SonComponent&gt;<br>            &lt;/ParentContext.Provider&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="四、组件通讯"><a href="#四、组件通讯" class="headerlink" title="四、组件通讯"></a>四、组件通讯</h2><h3 id="vue-1"><a href="#vue-1" class="headerlink" title="vue"></a>vue</h3><p>1.props/$emit;</p><p>2.provide/inject;</p><p>3.vuex;</p><p>4.localstorage;</p><p>5.event bus</p><h3 id="react-1"><a href="#react-1" class="headerlink" title="react"></a>react</h3><p>1.props</p><p>2.redux</p><p>3.context</p><p>4.event bus(库);</p><p>以上除了vuex, redux, localstorage, event bus 基本上都写了一遍</p><h2 id="五、我的总体感受"><a href="#五、我的总体感受" class="headerlink" title="五、我的总体感受"></a>五、我的总体感受</h2><ul><li>就像<a href="https://juejin.cn/post/6953482028188860424">俊劫</a> 说的一样vue更加的能上手，开箱即用并且能够灵活的配置webpack，不像react一样需要eject一下将配置文件全部抛出来，并且还是不可逆的，虽然多多少少有一些插件可以重构webpack<br>但还是vue直接添加一个vue.config.js来的香。</li><li>其实在我写vue和react来说其实并没有太大的区别感受，可能和我都是写jsx语法有关系吧，但是vue+ts,和react+ts，emm两者区别还是挺大的，但是没关系噢，vue3已经灰度测试了，并且引入了组件API(Composition API)，能够更好的支持ts，虽然我还没用过🐶保命，<br>但是我还是挺期待vue3的(尤大🐂🍺);</li></ul><h2 id="六、资源分享"><a href="#六、资源分享" class="headerlink" title="六、资源分享"></a>六、资源分享</h2><p><a href="https://juejin.cn/post/6953482028188860424">俊劫</a> 直接去他掘金地址里面找吧，我反正找不到🐶🐶🐶。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue和react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 17. 打印从 1 到最大的 n 位数</title>
      <link href="printNumbers/%E5%89%91%E6%8C%87-offer-17-%E6%89%93%E5%8D%B0%E4%BB%8E-1-%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84-n-%E4%BD%8D%E6%95%B0/"/>
      <url>printNumbers/%E5%89%91%E6%8C%87-offer-17-%E6%89%93%E5%8D%B0%E4%BB%8E-1-%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84-n-%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>十进制</p></blockquote><p>输入数字 <code>n</code>，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p><p>示例 1:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入: n = <span class="hljs-number">1</span><br>输出: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br></code></pre></td></tr></table></figure><p>这其实就是10, 100, 1000十进制问题，我们可以初始一个n = 1; n = n * 10;即可得出最大边界值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> printNumbers = <span class="hljs-function">(<span class="hljs-params">n</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> number = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        number *= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> array = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; number; i++) &#123;<br>        array.push(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 11. 旋转数组的最小数字</title>
      <link href="minArray/%E5%89%91%E6%8C%87-offer-11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
      <url>minArray/%E5%89%91%E6%8C%87-offer-11-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>二分查找</p></blockquote><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如，数组[3,4,5,1,2] 为 [1,2,3,4,5] 的一个旋转，该数组的最小值为1。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入：[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br>输出：<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">输入：[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>解题思路:</p><p>首先示例1旋转数组后为[1, 2, 3, 4, 5],</p><p>示例2旋转数组后为[0, 1, 2, 2, 2],</p><p>由此可以看出两个数组都是由小到大从左至右排序，并且最小值往往靠近最左侧，</p><p>所以</p><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">numbers = [3, 4, 5, 1, 2];<br><br>1.初始化最小边界left = 0，初始化最大边界right = numbers.length - 1;<br><br>2.取numbers中间值middle = parseInt((left + right) / 2); 因为这里可能产生小数，所以我们要对他进行取整数操作；<br><br>3.如果numbers[mid] &lt; numbers[right], 则我们可知最小值在[left, mid]之间，我们将最大边界right = mid；<br>接着进行比较操作。<br><br>4.如果numbers[mid] &gt; numbers[right], 则可知最小值存在于[mid + 1, right]之间，我们将最小边界left = mid + 1;<br><br>5.如果number[mid] === numbers[right], <br>例如[1, 2, 2, 2, 2], <br>left = 0; right = 4; mid = 2;<br>numbers[mid] = 2;<br>number[right] = 2;<br>number[mid] === number[right];<br>此时如果通过left++的话，可以得出 mid = 4 + 1 / 2 = 2;<br>mid = 4 + 2 / 2 = 3;<br>mid = 4 + 3 / 2 = 3;<br>到此为止left &lt; right 一直找不出numbers的最小值;<br>所以只能通过right --，来减少数组长度然后进行比较取出最小值，因为最小值永远是靠左的而不是靠右的；<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> minArray = <span class="hljs-function">(<span class="hljs-params">numbers</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">let</span> right = numbers.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(left &lt; right) &#123;<br>        <span class="hljs-keyword">const</span> mid = <span class="hljs-built_in">parseInt</span>((left + right) / <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span>(numbers[mid] &lt; numbers[right]) &#123;<br>            right = mid;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (numbers[mid] &gt; numbers[right]) &#123;<br>            left = mid + <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            right --;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> numbers[left];<br>&#125;;<br><br>minArray([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 05. 替换空格</title>
      <link href="replaceSpace/%E5%89%91%E6%8C%87-offer-05-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
      <url>replaceSpace/%E5%89%91%E6%8C%87-offer-05-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>请实现一个函数, 把字符串 s 中的每个空格替换成”%20”。</p><p>示例 1：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br>输入：s = <span class="hljs-string">&quot;We are happy.&quot;</span><br>输出：<span class="hljs-string">&quot;We%20are%20happy.&quot;</span><br><br></code></pre></td></tr></table></figure><p>这道题目的话相对于来说是比较简单的可以直接简单一点使用正则</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> replaceSpace = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> s.replace(<span class="hljs-regexp">/ /g</span>, <span class="hljs-string">&#x27;%20&#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>第二种</p><p>使用字符串特性，截取到每个字符串如果string[index] === ‘’<br>则进行处理</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> replaceSpace = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> StringLength = s.length;<br>    <span class="hljs-keyword">let</span> string = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; StringLength; i++) &#123;<br>        <span class="hljs-keyword">if</span>(s[i] === <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            string += <span class="hljs-string">&#x27;%20&#x27;</span><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            string += s[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> string;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 04. 二维数组中的查找</title>
      <link href="findNumberIn2DArray/%E5%89%91%E6%8C%87-offer-04-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>findNumberIn2DArray/%E5%89%91%E6%8C%87-offer-04-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>示例:</p><p>现有矩阵 matrix 如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">[<br>  [<span class="hljs-number">1</span>,   <span class="hljs-number">4</span>,  <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>],<br>  [<span class="hljs-number">2</span>,   <span class="hljs-number">5</span>,  <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">19</span>],<br>  [<span class="hljs-number">3</span>,   <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>],<br>  [<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">24</span>],<br>  [<span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">23</span>, <span class="hljs-number">26</span>, <span class="hljs-number">30</span>]<br>]<br></code></pre></td></tr></table></figure><p>给定 target = 5，返回 <code>true</code>。</p><p>给定 target = 20，返回 <code>false</code>。</p><p>限制：</p><figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>&lt;= n &lt;= <span class="hljs-number">1000</span><br><span class="hljs-symbol">0 </span>&lt;= m &lt;= <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>首先这道题目首先暴力的话其实挺简单的,只需要最简单的for循环即可</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> findNumberIn2DArray = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">matrix, target</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!matrix.length) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">let</span> isFind = <span class="hljs-literal">false</span>;<br>  <span class="hljs-comment">//二维数组</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; matrix.length; i++) &#123;<br>    <span class="hljs-comment">//二维数组中的一维数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; matrix[i].length; j++) &#123;<br>      <span class="hljs-keyword">if</span>(matrix[i][j] === target) &#123;<br>        isFind = <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> isFind;<br>&#125;;<br>findNumberIn2DArray([<br>  [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>],<br>  [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">19</span>],<br>  [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>],<br>  [<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">24</span>],<br>  [<span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">23</span>, <span class="hljs-number">26</span>, <span class="hljs-number">30</span>]<br>], <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/HyoukaM/HyoukaM.github.io/docs/docs/.vuepress/public/findNumberIn2DArray/findNumberIn2DArray.png" alt="findNumberIn2DArray"></p><p>但是显然表达的意思并不是想让你暴力破解，所以我们可以找到题目当中的关键字<br>从上到下，从左到右，于是乎</p><p><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/HyoukaM/HyoukaM.github.io/docs/docs/.vuepress/public/findNumberIn2DArray/img.png"><br><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/HyoukaM/HyoukaM.github.io/docs/docs/.vuepress/public/findNumberIn2DArray/img_1.png"><br><img src= "/img/loading.gif" data-lazy-src="https://raw.githubusercontent.com/HyoukaM/HyoukaM.github.io/docs/docs/.vuepress/public/findNumberIn2DArray/img_2.png"></p><p>从左下角作为原始起点(x)，左下角的上方数字比x要小，左下角的右方数字比x要大<br>由此规律便可得出从x开始进行比较,如果x &gt; target, 则将x = x上方的数字，<br>如果x &lt; target 则将x = x右方的数字;</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> findNumberIn2DArray = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">matrix, target</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!matrix.length) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">let</span> x = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> y = matrix.length - <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">//x作为每个一维数组长度的限制条件，y作为二位数组长度的限制条件</span><br>  <span class="hljs-keyword">while</span> (x &lt; matrix[<span class="hljs-number">0</span>].length &amp;&amp; y &gt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">//[4][0] = 18 &lt; 20 ? true; x = 1;</span><br>    <span class="hljs-comment">//[3][1] = 13 &lt; 20 ? true; x = 2;</span><br>    <span class="hljs-comment">//[3][2] = 14 &lt; 20 ? true; x = 3;</span><br>    <span class="hljs-keyword">if</span> (matrix[y][x] &lt; target) &#123;<br>      x++;<br>    <span class="hljs-comment">//[4][1] = 21 &gt; 20 ? true; x = 1; y = 3; </span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (matrix[y][x] &gt; target) &#123;<br>      y--;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br>findNumberIn2DArray([<br>  [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>],<br>  [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">19</span>],<br>  [<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">22</span>],<br>  [<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">24</span>],<br>  [<span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">23</span>, <span class="hljs-number">26</span>, <span class="hljs-number">30</span>]<br>], <span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指 Offer </tag>
            
            <tag> 中等难度 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
